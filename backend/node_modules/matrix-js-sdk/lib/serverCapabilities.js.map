{"version":3,"file":"serverCapabilities.js","names":["Method","logger","CAPABILITIES_CACHE_MS","CAPABILITIES_RETRY_MS","RoomVersionStability","ServerCapabilities","constructor","http","_this","_defineProperty","_asyncToGenerator","resp","authedRequest","Get","capabilities","fetchCapabilities","clearTimeouts","refreshTimeout","setTimeout","poll","debug","e","howLong","Math","floor","random","retryTimeout","warn","concat","start","then","stop","getCachedCapabilities","clearInterval","undefined","clearTimeout"],"sources":["../src/serverCapabilities.ts"],"sourcesContent":["/*\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type IHttpOpts, type MatrixHttpApi, Method } from \"./http-api/index.ts\";\nimport { logger } from \"./logger.ts\";\n\n// How often we update the server capabilities.\n// 6 hours - an arbitrary value, but they should change very infrequently.\nconst CAPABILITIES_CACHE_MS = 6 * 60 * 60 * 1000;\n\n// How long we want before retrying if we couldn't fetch\nconst CAPABILITIES_RETRY_MS = 30 * 1000;\n\nexport interface ICapability {\n    enabled: boolean;\n}\n\nexport interface IChangePasswordCapability extends ICapability {}\n\nexport interface IThreadsCapability extends ICapability {}\n\nexport interface IGetLoginTokenCapability extends ICapability {}\n\nexport interface ISetDisplayNameCapability extends ICapability {}\n\nexport interface ISetAvatarUrlCapability extends ICapability {}\n\nexport interface IProfileFieldsCapability extends ICapability {}\n\nexport enum RoomVersionStability {\n    Stable = \"stable\",\n    Unstable = \"unstable\",\n}\n\nexport interface IRoomVersionsCapability {\n    default: string;\n    available: Record<string, RoomVersionStability>;\n}\n\n/**\n * A representation of the capabilities advertised by a homeserver as defined by\n * [Capabilities negotiation](https://spec.matrix.org/v1.6/client-server-api/#get_matrixclientv3capabilities).\n */\nexport interface Capabilities {\n    [key: string]: any;\n    \"m.change_password\"?: IChangePasswordCapability;\n    \"m.room_versions\"?: IRoomVersionsCapability;\n    \"io.element.thread\"?: IThreadsCapability;\n    \"m.get_login_token\"?: IGetLoginTokenCapability;\n    \"org.matrix.msc3882.get_login_token\"?: IGetLoginTokenCapability;\n    \"m.set_displayname\"?: ISetDisplayNameCapability;\n    \"m.set_avatar_url\"?: ISetAvatarUrlCapability;\n    \"uk.tcpip.msc4133.profile_fields\"?: IProfileFieldsCapability;\n}\n\ntype CapabilitiesResponse = {\n    capabilities: Capabilities;\n};\n\n/**\n * Manages storing and periodically refreshing the server capabilities.\n */\nexport class ServerCapabilities {\n    private capabilities?: Capabilities;\n    private retryTimeout?: ReturnType<typeof setTimeout>;\n    private refreshTimeout?: ReturnType<typeof setInterval>;\n\n    public constructor(private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>) {}\n\n    /**\n     * Starts periodically fetching the server capabilities.\n     */\n    public start(): void {\n        this.poll().then();\n    }\n\n    /**\n     * Stops the service\n     */\n    public stop(): void {\n        this.clearTimeouts();\n    }\n\n    /**\n     * Returns the cached capabilities, or undefined if none are cached.\n     * @returns the current capabilities, if any.\n     */\n    public getCachedCapabilities(): Capabilities | undefined {\n        return this.capabilities;\n    }\n\n    /**\n     * Fetches the latest server capabilities from the homeserver and returns them, or rejects\n     * on failure.\n     */\n    public fetchCapabilities = async (): Promise<Capabilities> => {\n        const resp = await this.http.authedRequest<CapabilitiesResponse>(Method.Get, \"/capabilities\");\n        this.capabilities = resp[\"capabilities\"];\n        return this.capabilities;\n    };\n\n    private poll = async (): Promise<void> => {\n        try {\n            await this.fetchCapabilities();\n            this.clearTimeouts();\n            this.refreshTimeout = setTimeout(this.poll, CAPABILITIES_CACHE_MS);\n            logger.debug(\"Fetched new server capabilities\");\n        } catch (e) {\n            this.clearTimeouts();\n            const howLong = Math.floor(CAPABILITIES_RETRY_MS + Math.random() * 5000);\n            this.retryTimeout = setTimeout(this.poll, howLong);\n            logger.warn(`Failed to refresh capabilities: retrying in ${howLong}ms`, e);\n        }\n    };\n\n    private clearTimeouts(): void {\n        if (this.refreshTimeout) {\n            clearInterval(this.refreshTimeout);\n            this.refreshTimeout = undefined;\n        }\n        if (this.retryTimeout) {\n            clearTimeout(this.retryTimeout);\n            this.retryTimeout = undefined;\n        }\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAA6CA,MAAM,QAAQ,qBAAqB;AAChF,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA,IAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;;AAEhD;AACA,IAAMC,qBAAqB,GAAG,EAAE,GAAG,IAAI;AAkBvC,WAAYC,oBAAoB,0BAApBA,oBAAoB;EAApBA,oBAAoB;EAApBA,oBAAoB;EAAA,OAApBA,oBAAoB;AAAA;;AAUhC;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAKrBC,WAAWA,CAAkBC,IAAmD,EAAE;IAAA,IAAAC,KAAA;IAAA,KAArDD,IAAmD,GAAnDA,IAAmD;IAAAE,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAwBvF;AACJ;AACA;AACA;IAHIA,eAAA,yCAAAC,iBAAA,CAI2B,aAAmC;MAC1D,IAAMC,IAAI,SAASH,KAAI,CAACD,IAAI,CAACK,aAAa,CAAuBZ,MAAM,CAACa,GAAG,EAAE,eAAe,CAAC;MAC7FL,KAAI,CAACM,YAAY,GAAGH,IAAI,CAAC,cAAc,CAAC;MACxC,OAAOH,KAAI,CAACM,YAAY;IAC5B,CAAC;IAAAL,eAAA,4BAAAC,iBAAA,CAEc,aAA2B;MACtC,IAAI;QACA,MAAMF,KAAI,CAACO,iBAAiB,CAAC,CAAC;QAC9BP,KAAI,CAACQ,aAAa,CAAC,CAAC;QACpBR,KAAI,CAACS,cAAc,GAAGC,UAAU,CAACV,KAAI,CAACW,IAAI,EAAEjB,qBAAqB,CAAC;QAClED,MAAM,CAACmB,KAAK,CAAC,iCAAiC,CAAC;MACnD,CAAC,CAAC,OAAOC,CAAC,EAAE;QACRb,KAAI,CAACQ,aAAa,CAAC,CAAC;QACpB,IAAMM,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACrB,qBAAqB,GAAGoB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;QACxEjB,KAAI,CAACkB,YAAY,GAAGR,UAAU,CAACV,KAAI,CAACW,IAAI,EAAEG,OAAO,CAAC;QAClDrB,MAAM,CAAC0B,IAAI,gDAAAC,MAAA,CAAgDN,OAAO,SAAMD,CAAC,CAAC;MAC9E;IACJ,CAAC;EA9CyF;;EAE1F;AACJ;AACA;EACWQ,KAAKA,CAAA,EAAS;IACjB,IAAI,CAACV,IAAI,CAAC,CAAC,CAACW,IAAI,CAAC,CAAC;EACtB;;EAEA;AACJ;AACA;EACWC,IAAIA,CAAA,EAAS;IAChB,IAAI,CAACf,aAAa,CAAC,CAAC;EACxB;;EAEA;AACJ;AACA;AACA;EACWgB,qBAAqBA,CAAA,EAA6B;IACrD,OAAO,IAAI,CAAClB,YAAY;EAC5B;EA0BQE,aAAaA,CAAA,EAAS;IAC1B,IAAI,IAAI,CAACC,cAAc,EAAE;MACrBgB,aAAa,CAAC,IAAI,CAAChB,cAAc,CAAC;MAClC,IAAI,CAACA,cAAc,GAAGiB,SAAS;IACnC;IACA,IAAI,IAAI,CAACR,YAAY,EAAE;MACnBS,YAAY,CAAC,IAAI,CAACT,YAAY,CAAC;MAC/B,IAAI,CAACA,YAAY,GAAGQ,SAAS;IACjC;EACJ;AACJ","ignoreList":[]}