{"version":3,"file":"room-hierarchy.js","names":["EventType","RoomHierarchy","constructor","root","pageSize","maxDepth","suggestedOnly","arguments","length","undefined","_defineProperty","Map","noSupport","serverSupportError","canLoadMore","nextBatch","_rooms","loading","loadRequest","rooms","load","_arguments","_this","_asyncToGenerator","then","r","client","getRoomHierarchy","roomId","next_batch","e","errcode","concat","forEach","room","roomMap","set","room_id","children_state","ev","type","SpaceChild","childRoomId","state_key","backRefs","has","get","push","Array","isArray","content","via","viaMap","Set","vias","add","getRelation","parentId","childId","_this$roomMap$get","find","isSuggested","_this$getRelation","suggested","removeRelation","delete","filter","ref"],"sources":["../src/room-hierarchy.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type Room } from \"./models/room.ts\";\nimport { type IHierarchyRoom, type IHierarchyRelation } from \"./@types/spaces.ts\";\nimport { type MatrixClient } from \"./client.ts\";\nimport { EventType } from \"./@types/event.ts\";\nimport { type MatrixError } from \"./http-api/index.ts\";\n\nexport class RoomHierarchy {\n    // Map from room id to list of servers which are listed as a via somewhere in the loaded hierarchy\n    public readonly viaMap = new Map<string, Set<string>>();\n    // Map from room id to list of rooms which claim this room as their child\n    public readonly backRefs = new Map<string, string[]>();\n    // Map from room id to object\n    public readonly roomMap = new Map<string, IHierarchyRoom>();\n    private loadRequest?: ReturnType<MatrixClient[\"getRoomHierarchy\"]>;\n    private nextBatch?: string;\n    private _rooms?: IHierarchyRoom[];\n    private serverSupportError?: Error;\n\n    /**\n     * Construct a new RoomHierarchy\n     *\n     * A RoomHierarchy instance allows you to easily make use of the /hierarchy API and paginate it.\n     *\n     * @param root - the root of this hierarchy\n     * @param pageSize - the maximum number of rooms to return per page, can be overridden per load request.\n     * @param maxDepth - the maximum depth to traverse the hierarchy to\n     * @param suggestedOnly - whether to only return rooms with suggested=true.\n     */\n    public constructor(\n        public readonly root: Room,\n        private readonly pageSize?: number,\n        private readonly maxDepth?: number,\n        private readonly suggestedOnly = false,\n    ) {}\n\n    public get noSupport(): boolean {\n        return !!this.serverSupportError;\n    }\n\n    public get canLoadMore(): boolean {\n        return !!this.serverSupportError || !!this.nextBatch || !this._rooms;\n    }\n\n    public get loading(): boolean {\n        return !!this.loadRequest;\n    }\n\n    public get rooms(): IHierarchyRoom[] | undefined {\n        return this._rooms;\n    }\n\n    public async load(pageSize = this.pageSize): Promise<IHierarchyRoom[]> {\n        if (this.loadRequest) return this.loadRequest.then((r) => r.rooms);\n\n        this.loadRequest = this.root.client.getRoomHierarchy(\n            this.root.roomId,\n            pageSize,\n            this.maxDepth,\n            this.suggestedOnly,\n            this.nextBatch,\n        );\n\n        let rooms: IHierarchyRoom[];\n        try {\n            ({ rooms, next_batch: this.nextBatch } = await this.loadRequest);\n        } catch (e) {\n            if ((<MatrixError>e).errcode === \"M_UNRECOGNIZED\") {\n                this.serverSupportError = <MatrixError>e;\n            } else {\n                throw e;\n            }\n\n            return [];\n        } finally {\n            this.loadRequest = undefined;\n        }\n\n        if (this._rooms) {\n            this._rooms = this._rooms.concat(rooms);\n        } else {\n            this._rooms = rooms;\n        }\n\n        rooms.forEach((room) => {\n            this.roomMap.set(room.room_id, room);\n\n            room.children_state.forEach((ev) => {\n                if (ev.type !== EventType.SpaceChild) return;\n                const childRoomId = ev.state_key;\n\n                // track backrefs for quicker hierarchy navigation\n                if (!this.backRefs.has(childRoomId)) {\n                    this.backRefs.set(childRoomId, []);\n                }\n                this.backRefs.get(childRoomId)!.push(room.room_id);\n\n                // fill viaMap\n                if (Array.isArray(ev.content.via)) {\n                    if (!this.viaMap.has(childRoomId)) {\n                        this.viaMap.set(childRoomId, new Set());\n                    }\n                    const vias = this.viaMap.get(childRoomId)!;\n                    ev.content.via.forEach((via) => vias.add(via));\n                }\n            });\n        });\n\n        return rooms;\n    }\n\n    public getRelation(parentId: string, childId: string): IHierarchyRelation | undefined {\n        return this.roomMap.get(parentId)?.children_state.find((e) => e.state_key === childId);\n    }\n\n    public isSuggested(parentId: string, childId: string): boolean | undefined {\n        return this.getRelation(parentId, childId)?.content.suggested;\n    }\n\n    // locally remove a relation as a form of local echo\n    public removeRelation(parentId: string, childId: string): void {\n        const backRefs = this.backRefs.get(childId);\n        if (backRefs?.length === 1) {\n            this.backRefs.delete(childId);\n        } else if (backRefs?.length) {\n            this.backRefs.set(\n                childId,\n                backRefs.filter((ref) => ref !== parentId),\n            );\n        }\n\n        const room = this.roomMap.get(parentId);\n        if (room) {\n            room.children_state = room.children_state.filter((ev) => ev.state_key !== childId);\n        }\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASA,SAAS,QAAQ,mBAAmB;AAG7C,OAAO,MAAMC,aAAa,CAAC;EAYvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACWC,WAAWA,CACEC,IAAU,EACTC,QAAiB,EACjBC,QAAiB,EAEpC;IAAA,IADmBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,KAHtBJ,IAAU,GAAVA,IAAU;IAAA,KACTC,QAAiB,GAAjBA,QAAiB;IAAA,KACjBC,QAAiB,GAAjBA,QAAiB;IAAA,KACjBC,aAAa,GAAbA,aAAa;IAzBlC;IAAAI,eAAA,iBACyB,IAAIC,GAAG,CAAsB,CAAC;IACvD;IAAAD,eAAA,mBAC2B,IAAIC,GAAG,CAAmB,CAAC;IACtD;IAAAD,eAAA,kBAC0B,IAAIC,GAAG,CAAyB,CAAC;IAAAD,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;EAqBxD;EAEH,IAAWE,SAASA,CAAA,EAAY;IAC5B,OAAO,CAAC,CAAC,IAAI,CAACC,kBAAkB;EACpC;EAEA,IAAWC,WAAWA,CAAA,EAAY;IAC9B,OAAO,CAAC,CAAC,IAAI,CAACD,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAACE,SAAS,IAAI,CAAC,IAAI,CAACC,MAAM;EACxE;EAEA,IAAWC,OAAOA,CAAA,EAAY;IAC1B,OAAO,CAAC,CAAC,IAAI,CAACC,WAAW;EAC7B;EAEA,IAAWC,KAAKA,CAAA,EAAiC;IAC7C,OAAO,IAAI,CAACH,MAAM;EACtB;EAEaI,IAAIA,CAAA,EAAsD;IAAA,IAAAC,UAAA,GAAAd,SAAA;MAAAe,KAAA;IAAA,OAAAC,iBAAA;MAAA,IAArDnB,QAAQ,GAAAiB,UAAA,CAAAb,MAAA,QAAAa,UAAA,QAAAZ,SAAA,GAAAY,UAAA,MAAGC,KAAI,CAAClB,QAAQ;MACtC,IAAIkB,KAAI,CAACJ,WAAW,EAAE,OAAOI,KAAI,CAACJ,WAAW,CAACM,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACN,KAAK,CAAC;MAElEG,KAAI,CAACJ,WAAW,GAAGI,KAAI,CAACnB,IAAI,CAACuB,MAAM,CAACC,gBAAgB,CAChDL,KAAI,CAACnB,IAAI,CAACyB,MAAM,EAChBxB,QAAQ,EACRkB,KAAI,CAACjB,QAAQ,EACbiB,KAAI,CAAChB,aAAa,EAClBgB,KAAI,CAACP,SACT,CAAC;MAED,IAAII,KAAuB;MAC3B,IAAI;QACA,CAAC;UAAEA,KAAK;UAAEU,UAAU,EAAEP,KAAI,CAACP;QAAU,CAAC,SAASO,KAAI,CAACJ,WAAW;MACnE,CAAC,CAAC,OAAOY,CAAC,EAAE;QACR,IAAkBA,CAAC,CAAEC,OAAO,KAAK,gBAAgB,EAAE;UAC/CT,KAAI,CAACT,kBAAkB,GAAgBiB,CAAC;QAC5C,CAAC,MAAM;UACH,MAAMA,CAAC;QACX;QAEA,OAAO,EAAE;MACb,CAAC,SAAS;QACNR,KAAI,CAACJ,WAAW,GAAGT,SAAS;MAChC;MAEA,IAAIa,KAAI,CAACN,MAAM,EAAE;QACbM,KAAI,CAACN,MAAM,GAAGM,KAAI,CAACN,MAAM,CAACgB,MAAM,CAACb,KAAK,CAAC;MAC3C,CAAC,MAAM;QACHG,KAAI,CAACN,MAAM,GAAGG,KAAK;MACvB;MAEAA,KAAK,CAACc,OAAO,CAAEC,IAAI,IAAK;QACpBZ,KAAI,CAACa,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,OAAO,EAAEH,IAAI,CAAC;QAEpCA,IAAI,CAACI,cAAc,CAACL,OAAO,CAAEM,EAAE,IAAK;UAChC,IAAIA,EAAE,CAACC,IAAI,KAAKxC,SAAS,CAACyC,UAAU,EAAE;UACtC,IAAMC,WAAW,GAAGH,EAAE,CAACI,SAAS;;UAEhC;UACA,IAAI,CAACrB,KAAI,CAACsB,QAAQ,CAACC,GAAG,CAACH,WAAW,CAAC,EAAE;YACjCpB,KAAI,CAACsB,QAAQ,CAACR,GAAG,CAACM,WAAW,EAAE,EAAE,CAAC;UACtC;UACApB,KAAI,CAACsB,QAAQ,CAACE,GAAG,CAACJ,WAAW,CAAC,CAAEK,IAAI,CAACb,IAAI,CAACG,OAAO,CAAC;;UAElD;UACA,IAAIW,KAAK,CAACC,OAAO,CAACV,EAAE,CAACW,OAAO,CAACC,GAAG,CAAC,EAAE;YAC/B,IAAI,CAAC7B,KAAI,CAAC8B,MAAM,CAACP,GAAG,CAACH,WAAW,CAAC,EAAE;cAC/BpB,KAAI,CAAC8B,MAAM,CAAChB,GAAG,CAACM,WAAW,EAAE,IAAIW,GAAG,CAAC,CAAC,CAAC;YAC3C;YACA,IAAMC,IAAI,GAAGhC,KAAI,CAAC8B,MAAM,CAACN,GAAG,CAACJ,WAAW,CAAE;YAC1CH,EAAE,CAACW,OAAO,CAACC,GAAG,CAAClB,OAAO,CAAEkB,GAAG,IAAKG,IAAI,CAACC,GAAG,CAACJ,GAAG,CAAC,CAAC;UAClD;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAOhC,KAAK;IAAC;EACjB;EAEOqC,WAAWA,CAACC,QAAgB,EAAEC,OAAe,EAAkC;IAAA,IAAAC,iBAAA;IAClF,QAAAA,iBAAA,GAAO,IAAI,CAACxB,OAAO,CAACW,GAAG,CAACW,QAAQ,CAAC,cAAAE,iBAAA,uBAA1BA,iBAAA,CAA4BrB,cAAc,CAACsB,IAAI,CAAE9B,CAAC,IAAKA,CAAC,CAACa,SAAS,KAAKe,OAAO,CAAC;EAC1F;EAEOG,WAAWA,CAACJ,QAAgB,EAAEC,OAAe,EAAuB;IAAA,IAAAI,iBAAA;IACvE,QAAAA,iBAAA,GAAO,IAAI,CAACN,WAAW,CAACC,QAAQ,EAAEC,OAAO,CAAC,cAAAI,iBAAA,uBAAnCA,iBAAA,CAAqCZ,OAAO,CAACa,SAAS;EACjE;;EAEA;EACOC,cAAcA,CAACP,QAAgB,EAAEC,OAAe,EAAQ;IAC3D,IAAMd,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACE,GAAG,CAACY,OAAO,CAAC;IAC3C,IAAI,CAAAd,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEpC,MAAM,MAAK,CAAC,EAAE;MACxB,IAAI,CAACoC,QAAQ,CAACqB,MAAM,CAACP,OAAO,CAAC;IACjC,CAAC,MAAM,IAAId,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEpC,MAAM,EAAE;MACzB,IAAI,CAACoC,QAAQ,CAACR,GAAG,CACbsB,OAAO,EACPd,QAAQ,CAACsB,MAAM,CAAEC,GAAG,IAAKA,GAAG,KAAKV,QAAQ,CAC7C,CAAC;IACL;IAEA,IAAMvB,IAAI,GAAG,IAAI,CAACC,OAAO,CAACW,GAAG,CAACW,QAAQ,CAAC;IACvC,IAAIvB,IAAI,EAAE;MACNA,IAAI,CAACI,cAAc,GAAGJ,IAAI,CAACI,cAAc,CAAC4B,MAAM,CAAE3B,EAAE,IAAKA,EAAE,CAACI,SAAS,KAAKe,OAAO,CAAC;IACtF;EACJ;AACJ","ignoreList":[]}