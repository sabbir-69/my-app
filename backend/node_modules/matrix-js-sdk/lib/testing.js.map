{"version":3,"file":"testing.js","names":["MatrixEvent","EventType","DecryptionError","mkMatrixEvent","opts","_opts$eventId","_opts$ts","event","type","room_id","roomId","sender","content","event_id","eventId","Math","random","origin_server_ts","ts","unsigned","stateKey","undefined","state_key","mxEvent","userId","membership","name","rawDisplayName","getAvatarUrl","getMxcAvatarUrl","mkEncryptedMatrixEvent","_x","_mkEncryptedMatrixEvent","apply","arguments","_asyncToGenerator","RoomMessageEncrypted","algorithm","decryptExistingEvent","plainType","plainContent","mkDecryptionFailureMatrixEvent","_x2","_mkDecryptionFailureMatrixEvent","mockCrypto","decryptEvent","_decryptEvent","_ev","code","msg","_x5","attemptDecryption","_x3","_x4","_decryptExistingEvent","decryptionResult","claimedEd25519Key","clearEvent","forwardingCurve25519KeyChain","senderCurve25519Key","untrusted","_decryptEvent2","_x6","makeDelegatedAuthConfig","issuer","length","additionalGrantTypes","metadata","mockOpenIdConfiguration","_objectSpread","signingKeys","revocation_endpoint","token_endpoint","authorization_endpoint","registration_endpoint","device_authorization_endpoint","jwks_uri","response_types_supported","grant_types_supported","code_challenge_methods_supported"],"sources":["../src/testing.ts"],"sourcesContent":["/*\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This file is a secondary entrypoint for the js-sdk library, exposing utilities which might be useful for writing tests.\n *\n * In general, it should not be included in runtime applications.\n *\n * @packageDocumentation\n */\n\nimport { type IContent, type IEvent, type IUnsigned, MatrixEvent } from \"./models/event.ts\";\nimport { type RoomMember } from \"./models/room-member.ts\";\nimport { EventType } from \"./@types/event.ts\";\nimport { type DecryptionFailureCode } from \"./crypto-api/index.ts\";\nimport { DecryptionError, type EventDecryptionResult } from \"./common-crypto/CryptoBackend.ts\";\nimport { type OidcClientConfig, type ValidatedAuthMetadata } from \"./oidc/index.ts\";\n\n/**\n * Create a {@link MatrixEvent}.\n *\n * @param opts - Values for the event.\n */\nexport function mkMatrixEvent(opts: {\n    /** Room ID of the event. */\n    roomId: string;\n\n    /** The sender of the event. */\n    sender: string;\n\n    /** The type of the event. */\n    type: EventType | string;\n\n    /** Optional `state_key` for the event. If unspecified, a non-state event is created. */\n    stateKey?: string;\n\n    /** Optional `origin_server_ts` for the event. If unspecified, the timestamp will be set to 0. */\n    ts?: number;\n\n    /** Optional `event_id` for the event. If provided will be used as event ID; else an ID is generated. */\n    eventId?: string;\n\n    /** Content of the event. */\n    content: IContent;\n\n    /** Optional `unsigned` data for the event. */\n    unsigned?: IUnsigned;\n}): MatrixEvent {\n    const event: Partial<IEvent> = {\n        type: opts.type,\n        room_id: opts.roomId,\n        sender: opts.sender,\n        content: opts.content,\n        event_id: opts.eventId ?? \"$\" + Math.random() + \"-\" + Math.random(),\n        origin_server_ts: opts.ts ?? 0,\n        unsigned: opts.unsigned,\n    };\n    if (opts.stateKey !== undefined) {\n        event.state_key = opts.stateKey;\n    }\n\n    const mxEvent = new MatrixEvent(event);\n    mxEvent.sender = {\n        userId: opts.sender,\n        membership: \"join\",\n        name: opts.sender,\n        rawDisplayName: opts.sender,\n        roomId: opts.sender,\n        getAvatarUrl: () => {},\n        getMxcAvatarUrl: () => {},\n    } as unknown as RoomMember;\n    return mxEvent;\n}\n\n/**\n * Create a `MatrixEvent` representing a successfully-decrypted `m.room.encrypted` event.\n *\n * @param opts - Values for the event.\n */\nexport async function mkEncryptedMatrixEvent(opts: {\n    /** Room ID of the event. */\n    roomId: string;\n\n    /** The sender of the event. */\n    sender: string;\n\n    /** The type the event will have, once it has been decrypted. */\n    plainType: EventType | string;\n\n    /** The content the event will have, once it has been decrypted. */\n    plainContent: IContent;\n\n    /** Optional `event_id` for the event. If provided will be used as event ID; else an ID is generated. */\n    eventId?: string;\n}): Promise<MatrixEvent> {\n    const mxEvent = mkMatrixEvent({\n        type: EventType.RoomMessageEncrypted,\n        roomId: opts.roomId,\n        sender: opts.sender,\n        content: { algorithm: \"m.megolm.v1.aes-sha2\" },\n        eventId: opts.eventId,\n    });\n\n    await decryptExistingEvent(mxEvent, { plainType: opts.plainType, plainContent: opts.plainContent });\n    return mxEvent;\n}\n\n/**\n * Create a `MatrixEvent` representing a `m.room.encrypted` event which could not be decrypted.\n *\n * @param opts - Values for the event.\n */\nexport async function mkDecryptionFailureMatrixEvent(opts: {\n    /** Room ID of the event. */\n    roomId: string;\n\n    /** The sender of the event. */\n    sender: string;\n\n    /** The reason code for the failure */\n    code: DecryptionFailureCode;\n\n    /** A textual reason for the failure */\n    msg: string;\n\n    /** Optional `event_id` for the event. If provided will be used as event ID; else an ID is generated. */\n    eventId?: string;\n}): Promise<MatrixEvent> {\n    const mxEvent = mkMatrixEvent({\n        type: EventType.RoomMessageEncrypted,\n        roomId: opts.roomId,\n        sender: opts.sender,\n        content: { algorithm: \"m.megolm.v1.aes-sha2\" },\n        eventId: opts.eventId,\n    });\n\n    const mockCrypto = {\n        decryptEvent: async (_ev): Promise<EventDecryptionResult> => {\n            throw new DecryptionError(opts.code, opts.msg);\n        },\n    } as Parameters<MatrixEvent[\"attemptDecryption\"]>[0];\n    await mxEvent.attemptDecryption(mockCrypto);\n    return mxEvent;\n}\n\n/**\n * Given an event previously returned by {@link mkDecryptionFailureMatrixEvent}, simulate a successful re-decryption\n * attempt.\n *\n * @param mxEvent - The event that will be decrypted.\n * @param opts - New data for the successful decryption.\n */\nexport async function decryptExistingEvent(\n    mxEvent: MatrixEvent,\n    opts: {\n        /** The type the event will have, once it has been decrypted. */\n        plainType: EventType | string;\n\n        /** The content the event will have, once it has been decrypted. */\n        plainContent: IContent;\n    },\n): Promise<void> {\n    const decryptionResult: EventDecryptionResult = {\n        claimedEd25519Key: \"\",\n        clearEvent: {\n            type: opts.plainType,\n            content: opts.plainContent,\n        },\n        forwardingCurve25519KeyChain: [],\n        senderCurve25519Key: \"\",\n        untrusted: false,\n    };\n\n    const mockCrypto = {\n        decryptEvent: async (_ev): Promise<EventDecryptionResult> => decryptionResult,\n    } as Parameters<MatrixEvent[\"attemptDecryption\"]>[0];\n    await mxEvent.attemptDecryption(mockCrypto);\n}\n\n/**\n * Makes a valid OidcClientConfig with minimum valid values\n * @param issuer used as the base for all other urls\n * @param additionalGrantTypes to add to the default grant types\n * @returns OidcClientConfig\n * @experimental\n */\nexport const makeDelegatedAuthConfig = (\n    issuer = \"https://auth.org/\",\n    additionalGrantTypes: string[] = [],\n): OidcClientConfig => {\n    const metadata = mockOpenIdConfiguration(issuer, additionalGrantTypes);\n\n    return {\n        ...metadata,\n        signingKeys: null,\n    };\n};\n\n/**\n * Useful for mocking <issuer>/.well-known/openid-configuration\n * @param issuer used as the base for all other urls\n * @param additionalGrantTypes to add to the default grant types\n * @returns ValidatedAuthMetadata\n * @experimental\n */\nexport const mockOpenIdConfiguration = (\n    issuer = \"https://auth.org/\",\n    additionalGrantTypes: string[] = [],\n): ValidatedAuthMetadata => ({\n    issuer,\n    revocation_endpoint: issuer + \"revoke\",\n    token_endpoint: issuer + \"token\",\n    authorization_endpoint: issuer + \"auth\",\n    registration_endpoint: issuer + \"registration\",\n    device_authorization_endpoint: issuer + \"device\",\n    jwks_uri: issuer + \"jwks\",\n    response_types_supported: [\"code\"],\n    grant_types_supported: [\"authorization_code\", \"refresh_token\", ...additionalGrantTypes],\n    code_challenge_methods_supported: [\"S256\"],\n});\n"],"mappings":"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","ignoreList":[]}