{"version":3,"file":"transportStatsBuilder.js","names":["TransportStatsBuilder","buildReport","report","now","conferenceStatsTransport","isFocus","localUsedCandidate","get","localCandidateId","remoteUsedCandidate","remoteCandidateId","remoteIpAddress","ip","undefined","address","remotePort","port","concat","localIpAddress","localPort","localIp","type","protocol","some","t","push","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","NaN"],"sources":["../../../src/webrtc/stats/transportStatsBuilder.ts"],"sourcesContent":["import { type TransportStats } from \"./transportStats.ts\";\n\nexport class TransportStatsBuilder {\n    public static buildReport(\n        report: RTCStatsReport | undefined,\n        now: RTCIceCandidatePairStats,\n        conferenceStatsTransport: TransportStats[],\n        isFocus: boolean,\n    ): TransportStats[] {\n        const localUsedCandidate = report?.get(now.localCandidateId);\n        const remoteUsedCandidate = report?.get(now.remoteCandidateId);\n\n        // RTCIceCandidateStats\n        // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n        if (remoteUsedCandidate && localUsedCandidate) {\n            const remoteIpAddress =\n                remoteUsedCandidate.ip !== undefined ? remoteUsedCandidate.ip : remoteUsedCandidate.address;\n            const remotePort = remoteUsedCandidate.port;\n            const ip = `${remoteIpAddress}:${remotePort}`;\n\n            const localIpAddress =\n                localUsedCandidate.ip !== undefined ? localUsedCandidate.ip : localUsedCandidate.address;\n            const localPort = localUsedCandidate.port;\n            const localIp = `${localIpAddress}:${localPort}`;\n\n            const type = remoteUsedCandidate.protocol;\n\n            // Save the address unless it has been saved already.\n            if (\n                !conferenceStatsTransport.some(\n                    (t: TransportStats) => t.ip === ip && t.type === type && t.localIp === localIp,\n                )\n            ) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localIp,\n                    isFocus,\n                    localCandidateType: localUsedCandidate.candidateType,\n                    remoteCandidateType: remoteUsedCandidate.candidateType,\n                    networkType: localUsedCandidate.networkType,\n                    rtt: now.currentRoundTripTime ? now.currentRoundTripTime * 1000 : NaN,\n                } as TransportStats);\n            }\n        }\n        return conferenceStatsTransport;\n    }\n}\n"],"mappings":"AAEA,OAAO,MAAMA,qBAAqB,CAAC;EAC/B,OAAcC,WAAWA,CACrBC,MAAkC,EAClCC,GAA6B,EAC7BC,wBAA0C,EAC1CC,OAAgB,EACA;IAChB,IAAMC,kBAAkB,GAAGJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,GAAG,CAACJ,GAAG,CAACK,gBAAgB,CAAC;IAC5D,IAAMC,mBAAmB,GAAGP,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,GAAG,CAACJ,GAAG,CAACO,iBAAiB,CAAC;;IAE9D;IACA;IACA,IAAID,mBAAmB,IAAIH,kBAAkB,EAAE;MAC3C,IAAMK,eAAe,GACjBF,mBAAmB,CAACG,EAAE,KAAKC,SAAS,GAAGJ,mBAAmB,CAACG,EAAE,GAAGH,mBAAmB,CAACK,OAAO;MAC/F,IAAMC,UAAU,GAAGN,mBAAmB,CAACO,IAAI;MAC3C,IAAMJ,EAAE,MAAAK,MAAA,CAAMN,eAAe,OAAAM,MAAA,CAAIF,UAAU,CAAE;MAE7C,IAAMG,cAAc,GAChBZ,kBAAkB,CAACM,EAAE,KAAKC,SAAS,GAAGP,kBAAkB,CAACM,EAAE,GAAGN,kBAAkB,CAACQ,OAAO;MAC5F,IAAMK,SAAS,GAAGb,kBAAkB,CAACU,IAAI;MACzC,IAAMI,OAAO,MAAAH,MAAA,CAAMC,cAAc,OAAAD,MAAA,CAAIE,SAAS,CAAE;MAEhD,IAAME,IAAI,GAAGZ,mBAAmB,CAACa,QAAQ;;MAEzC;MACA,IACI,CAAClB,wBAAwB,CAACmB,IAAI,CACzBC,CAAiB,IAAKA,CAAC,CAACZ,EAAE,KAAKA,EAAE,IAAIY,CAAC,CAACH,IAAI,KAAKA,IAAI,IAAIG,CAAC,CAACJ,OAAO,KAAKA,OAC3E,CAAC,EACH;QACEhB,wBAAwB,CAACqB,IAAI,CAAC;UAC1Bb,EAAE;UACFS,IAAI;UACJD,OAAO;UACPf,OAAO;UACPqB,kBAAkB,EAAEpB,kBAAkB,CAACqB,aAAa;UACpDC,mBAAmB,EAAEnB,mBAAmB,CAACkB,aAAa;UACtDE,WAAW,EAAEvB,kBAAkB,CAACuB,WAAW;UAC3CC,GAAG,EAAE3B,GAAG,CAAC4B,oBAAoB,GAAG5B,GAAG,CAAC4B,oBAAoB,GAAG,IAAI,GAAGC;QACtE,CAAmB,CAAC;MACxB;IACJ;IACA,OAAO5B,wBAAwB;EACnC;AACJ","ignoreList":[]}