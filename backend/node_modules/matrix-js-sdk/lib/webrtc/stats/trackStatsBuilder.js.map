{"version":3,"file":"trackStatsBuilder.js","names":["ValueFormatter","TrackStatsBuilder","buildFramerateResolution","trackStats","now","resolution","height","frameHeight","width","frameWidth","frameRate","framesPerSecond","setResolution","setFramerate","Math","round","calculateSimulcastFramerate","before","layer","getFramerate","timeMs","timestamp","framesSent","numberOfFramesSinceBefore","buildCodec","report","codec","get","codecId","codecShortType","mimeType","split","setCodec","buildBitrateReceived","setBitrate","download","calculateBitrate","bytesReceived","upload","buildBitrateSend","bytesSent","buildPacketsLost","key","type","packetsNow","packetsBefore","getNonNegativeValue","packetsDiff","max","packetsLostNow","packetsLost","packetsLostBefore","packetsLostDiff","setLoss","packetsTotal","isDownloadStream","bytesNowAny","bytesBeforeAny","nowTimestamp","beforeTimestamp","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","setTrackStatsState","transceiver","_transceiver$sender","undefined","alive","track","getType","receiver","sender","readyState","muted","enabled","buildTrackSummary","trackStatsList","videoTrackSummary","count","maxJitter","maxPacketLoss","concealedAudio","totalAudio","audioTrackSummary","remoteTrackList","filter","t","audioTrackList","kind","forEach","stats","trackSummary","getJitter","getLoss","length","_stats$getAudioConcea","_stats$getAudioConcea2","getAudioConcealment","totalAudioDuration","buildJitter","statsReport","jitterStr","jitter","setJitter","buildAudioConcealment","msPerSample","totalSamplesDuration","totalSamplesReceived","concealedAudioDuration","concealedSamples","setAudioConcealment"],"sources":["../../../src/webrtc/stats/trackStatsBuilder.ts"],"sourcesContent":["import { type MediaTrackStats } from \"./media/mediaTrackStats.ts\";\nimport { ValueFormatter } from \"./valueFormatter.ts\";\nimport { type TrackSummary } from \"./callStatsReportSummary.ts\";\n\nexport class TrackStatsBuilder {\n    public static buildFramerateResolution(trackStats: MediaTrackStats, now: any): void {\n        const resolution = {\n            height: now.frameHeight,\n            width: now.frameWidth,\n        };\n        const frameRate = now.framesPerSecond;\n\n        if (resolution.height && resolution.width) {\n            trackStats.setResolution(resolution);\n        }\n        trackStats.setFramerate(Math.round(frameRate || 0));\n    }\n\n    public static calculateSimulcastFramerate(trackStats: MediaTrackStats, now: any, before: any, layer: number): void {\n        let frameRate = trackStats.getFramerate();\n        if (!frameRate) {\n            if (before) {\n                const timeMs = now.timestamp - before.timestamp;\n\n                if (timeMs > 0 && now.framesSent) {\n                    const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                    frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                }\n            }\n\n            if (!frameRate) {\n                return;\n            }\n        }\n\n        // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n        frameRate = layer ? Math.round(frameRate / layer) : 0;\n        trackStats.setFramerate(frameRate);\n    }\n\n    public static buildCodec(report: RTCStatsReport | undefined, trackStats: MediaTrackStats, now: any): void {\n        const codec = report?.get(now.codecId);\n\n        if (codec) {\n            /**\n             * The mime type has the following form: video/VP8 or audio/ISAC,\n             * so we what to keep just the type after the '/', audio and video\n             * keys will be added on the processing side.\n             */\n            const codecShortType = codec.mimeType.split(\"/\")[1];\n\n            if (codecShortType) trackStats.setCodec(codecShortType);\n        }\n    }\n\n    public static buildBitrateReceived(trackStats: MediaTrackStats, now: any, before: any): void {\n        trackStats.setBitrate({\n            download: TrackStatsBuilder.calculateBitrate(\n                now.bytesReceived,\n                before.bytesReceived,\n                now.timestamp,\n                before.timestamp,\n            ),\n            upload: 0,\n        });\n    }\n\n    public static buildBitrateSend(trackStats: MediaTrackStats, now: any, before: any): void {\n        trackStats.setBitrate({\n            download: 0,\n            upload: this.calculateBitrate(now.bytesSent, before.bytesSent, now.timestamp, before.timestamp),\n        });\n    }\n\n    public static buildPacketsLost(trackStats: MediaTrackStats, now: any, before: any): void {\n        const key = now.type === \"outbound-rtp\" ? \"packetsSent\" : \"packetsReceived\";\n\n        let packetsNow = now[key];\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = ValueFormatter.getNonNegativeValue(before[key]);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow = ValueFormatter.getNonNegativeValue(now.packetsLost);\n        const packetsLostBefore = ValueFormatter.getNonNegativeValue(before.packetsLost);\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        trackStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream: now.type !== \"outbound-rtp\",\n        });\n    }\n\n    private static calculateBitrate(\n        bytesNowAny: any,\n        bytesBeforeAny: any,\n        nowTimestamp: number,\n        beforeTimestamp: number,\n    ): number {\n        const bytesNow = ValueFormatter.getNonNegativeValue(bytesNowAny);\n        const bytesBefore = ValueFormatter.getNonNegativeValue(bytesBeforeAny);\n        const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n        const timeMs = nowTimestamp - beforeTimestamp;\n        let bitrateKbps = 0;\n\n        if (timeMs > 0) {\n            bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n        }\n\n        return bitrateKbps;\n    }\n\n    public static setTrackStatsState(trackStats: MediaTrackStats, transceiver: RTCRtpTransceiver | undefined): void {\n        if (transceiver === undefined) {\n            trackStats.alive = false;\n            return;\n        }\n\n        const track = trackStats.getType() === \"remote\" ? transceiver.receiver.track : transceiver?.sender?.track;\n        if (track === undefined || track === null) {\n            trackStats.alive = false;\n            return;\n        }\n\n        if (track.readyState === \"ended\") {\n            trackStats.alive = false;\n            return;\n        }\n        trackStats.muted = track.muted;\n        trackStats.enabled = track.enabled;\n        trackStats.alive = true;\n    }\n\n    public static buildTrackSummary(trackStatsList: MediaTrackStats[]): {\n        audioTrackSummary: TrackSummary;\n        videoTrackSummary: TrackSummary;\n    } {\n        const videoTrackSummary: TrackSummary = {\n            count: 0,\n            muted: 0,\n            maxJitter: 0,\n            maxPacketLoss: 0,\n            concealedAudio: 0,\n            totalAudio: 0,\n        };\n        const audioTrackSummary: TrackSummary = {\n            count: 0,\n            muted: 0,\n            maxJitter: 0,\n            maxPacketLoss: 0,\n            concealedAudio: 0,\n            totalAudio: 0,\n        };\n\n        const remoteTrackList = trackStatsList.filter((t) => t.getType() === \"remote\");\n        const audioTrackList = remoteTrackList.filter((t) => t.kind === \"audio\");\n\n        remoteTrackList.forEach((stats) => {\n            const trackSummary = stats.kind === \"video\" ? videoTrackSummary : audioTrackSummary;\n            trackSummary.count++;\n            if (stats.alive && stats.muted) {\n                trackSummary.muted++;\n            }\n            if (trackSummary.maxJitter < stats.getJitter()) {\n                trackSummary.maxJitter = stats.getJitter();\n            }\n            if (trackSummary.maxPacketLoss < stats.getLoss().packetsLost) {\n                trackSummary.maxPacketLoss = stats.getLoss().packetsLost;\n            }\n            if (audioTrackList.length > 0) {\n                trackSummary.concealedAudio += stats.getAudioConcealment()?.concealedAudio;\n                trackSummary.totalAudio += stats.getAudioConcealment()?.totalAudioDuration;\n            }\n        });\n\n        return { audioTrackSummary, videoTrackSummary };\n    }\n\n    public static buildJitter(trackStats: MediaTrackStats, statsReport: any): void {\n        if (statsReport.type !== \"inbound-rtp\") {\n            return;\n        }\n\n        const jitterStr = statsReport?.jitter;\n        if (jitterStr !== undefined) {\n            const jitter = ValueFormatter.getNonNegativeValue(jitterStr);\n            trackStats.setJitter(Math.round(jitter * 1000));\n        } else {\n            trackStats.setJitter(-1);\n        }\n    }\n\n    public static buildAudioConcealment(trackStats: MediaTrackStats, statsReport: any): void {\n        if (statsReport.type !== \"inbound-rtp\") {\n            return;\n        }\n        const msPerSample = (1000 * statsReport?.totalSamplesDuration) / statsReport?.totalSamplesReceived;\n        const concealedAudioDuration = msPerSample * statsReport?.concealedSamples;\n        const totalAudioDuration = 1000 * statsReport?.totalSamplesDuration;\n        trackStats.setAudioConcealment(concealedAudioDuration, totalAudioDuration);\n    }\n}\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,qBAAqB;AAGpD,OAAO,MAAMC,iBAAiB,CAAC;EAC3B,OAAcC,wBAAwBA,CAACC,UAA2B,EAAEC,GAAQ,EAAQ;IAChF,IAAMC,UAAU,GAAG;MACfC,MAAM,EAAEF,GAAG,CAACG,WAAW;MACvBC,KAAK,EAAEJ,GAAG,CAACK;IACf,CAAC;IACD,IAAMC,SAAS,GAAGN,GAAG,CAACO,eAAe;IAErC,IAAIN,UAAU,CAACC,MAAM,IAAID,UAAU,CAACG,KAAK,EAAE;MACvCL,UAAU,CAACS,aAAa,CAACP,UAAU,CAAC;IACxC;IACAF,UAAU,CAACU,YAAY,CAACC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAI,CAAC,CAAC,CAAC;EACvD;EAEA,OAAcM,2BAA2BA,CAACb,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAEC,KAAa,EAAQ;IAC/G,IAAIR,SAAS,GAAGP,UAAU,CAACgB,YAAY,CAAC,CAAC;IACzC,IAAI,CAACT,SAAS,EAAE;MACZ,IAAIO,MAAM,EAAE;QACR,IAAMG,MAAM,GAAGhB,GAAG,CAACiB,SAAS,GAAGJ,MAAM,CAACI,SAAS;QAE/C,IAAID,MAAM,GAAG,CAAC,IAAIhB,GAAG,CAACkB,UAAU,EAAE;UAC9B,IAAMC,yBAAyB,GAAGnB,GAAG,CAACkB,UAAU,GAAGL,MAAM,CAACK,UAAU;UAEpEZ,SAAS,GAAIa,yBAAyB,GAAGH,MAAM,GAAI,IAAI;QAC3D;MACJ;MAEA,IAAI,CAACV,SAAS,EAAE;QACZ;MACJ;IACJ;;IAEA;IACAA,SAAS,GAAGQ,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACL,SAAS,GAAGQ,KAAK,CAAC,GAAG,CAAC;IACrDf,UAAU,CAACU,YAAY,CAACH,SAAS,CAAC;EACtC;EAEA,OAAcc,UAAUA,CAACC,MAAkC,EAAEtB,UAA2B,EAAEC,GAAQ,EAAQ;IACtG,IAAMsB,KAAK,GAAGD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,GAAG,CAACvB,GAAG,CAACwB,OAAO,CAAC;IAEtC,IAAIF,KAAK,EAAE;MACP;AACZ;AACA;AACA;AACA;MACY,IAAMG,cAAc,GAAGH,KAAK,CAACI,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEnD,IAAIF,cAAc,EAAE1B,UAAU,CAAC6B,QAAQ,CAACH,cAAc,CAAC;IAC3D;EACJ;EAEA,OAAcI,oBAAoBA,CAAC9B,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAQ;IACzFd,UAAU,CAAC+B,UAAU,CAAC;MAClBC,QAAQ,EAAElC,iBAAiB,CAACmC,gBAAgB,CACxChC,GAAG,CAACiC,aAAa,EACjBpB,MAAM,CAACoB,aAAa,EACpBjC,GAAG,CAACiB,SAAS,EACbJ,MAAM,CAACI,SACX,CAAC;MACDiB,MAAM,EAAE;IACZ,CAAC,CAAC;EACN;EAEA,OAAcC,gBAAgBA,CAACpC,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAQ;IACrFd,UAAU,CAAC+B,UAAU,CAAC;MAClBC,QAAQ,EAAE,CAAC;MACXG,MAAM,EAAE,IAAI,CAACF,gBAAgB,CAAChC,GAAG,CAACoC,SAAS,EAAEvB,MAAM,CAACuB,SAAS,EAAEpC,GAAG,CAACiB,SAAS,EAAEJ,MAAM,CAACI,SAAS;IAClG,CAAC,CAAC;EACN;EAEA,OAAcoB,gBAAgBA,CAACtC,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAQ;IACrF,IAAMyB,GAAG,GAAGtC,GAAG,CAACuC,IAAI,KAAK,cAAc,GAAG,aAAa,GAAG,iBAAiB;IAE3E,IAAIC,UAAU,GAAGxC,GAAG,CAACsC,GAAG,CAAC;IACzB,IAAI,CAACE,UAAU,IAAIA,UAAU,GAAG,CAAC,EAAE;MAC/BA,UAAU,GAAG,CAAC;IAClB;IAEA,IAAMC,aAAa,GAAG7C,cAAc,CAAC8C,mBAAmB,CAAC7B,MAAM,CAACyB,GAAG,CAAC,CAAC;IACrE,IAAMK,WAAW,GAAGjC,IAAI,CAACkC,GAAG,CAAC,CAAC,EAAEJ,UAAU,GAAGC,aAAa,CAAC;IAE3D,IAAMI,cAAc,GAAGjD,cAAc,CAAC8C,mBAAmB,CAAC1C,GAAG,CAAC8C,WAAW,CAAC;IAC1E,IAAMC,iBAAiB,GAAGnD,cAAc,CAAC8C,mBAAmB,CAAC7B,MAAM,CAACiC,WAAW,CAAC;IAChF,IAAME,eAAe,GAAGtC,IAAI,CAACkC,GAAG,CAAC,CAAC,EAAEC,cAAc,GAAGE,iBAAiB,CAAC;IAEvEhD,UAAU,CAACkD,OAAO,CAAC;MACfC,YAAY,EAAEP,WAAW,GAAGK,eAAe;MAC3CF,WAAW,EAAEE,eAAe;MAC5BG,gBAAgB,EAAEnD,GAAG,CAACuC,IAAI,KAAK;IACnC,CAAC,CAAC;EACN;EAEA,OAAeP,gBAAgBA,CAC3BoB,WAAgB,EAChBC,cAAmB,EACnBC,YAAoB,EACpBC,eAAuB,EACjB;IACN,IAAMC,QAAQ,GAAG5D,cAAc,CAAC8C,mBAAmB,CAACU,WAAW,CAAC;IAChE,IAAMK,WAAW,GAAG7D,cAAc,CAAC8C,mBAAmB,CAACW,cAAc,CAAC;IACtE,IAAMK,cAAc,GAAGhD,IAAI,CAACkC,GAAG,CAAC,CAAC,EAAEY,QAAQ,GAAGC,WAAW,CAAC;IAE1D,IAAMzC,MAAM,GAAGsC,YAAY,GAAGC,eAAe;IAC7C,IAAII,WAAW,GAAG,CAAC;IAEnB,IAAI3C,MAAM,GAAG,CAAC,EAAE;MACZ2C,WAAW,GAAGjD,IAAI,CAACC,KAAK,CAAE+C,cAAc,GAAG,CAAC,GAAI1C,MAAM,CAAC;IAC3D;IAEA,OAAO2C,WAAW;EACtB;EAEA,OAAcC,kBAAkBA,CAAC7D,UAA2B,EAAE8D,WAA0C,EAAQ;IAAA,IAAAC,mBAAA;IAC5G,IAAID,WAAW,KAAKE,SAAS,EAAE;MAC3BhE,UAAU,CAACiE,KAAK,GAAG,KAAK;MACxB;IACJ;IAEA,IAAMC,KAAK,GAAGlE,UAAU,CAACmE,OAAO,CAAC,CAAC,KAAK,QAAQ,GAAGL,WAAW,CAACM,QAAQ,CAACF,KAAK,GAAGJ,WAAW,aAAXA,WAAW,gBAAAC,mBAAA,GAAXD,WAAW,CAAEO,MAAM,cAAAN,mBAAA,uBAAnBA,mBAAA,CAAqBG,KAAK;IACzG,IAAIA,KAAK,KAAKF,SAAS,IAAIE,KAAK,KAAK,IAAI,EAAE;MACvClE,UAAU,CAACiE,KAAK,GAAG,KAAK;MACxB;IACJ;IAEA,IAAIC,KAAK,CAACI,UAAU,KAAK,OAAO,EAAE;MAC9BtE,UAAU,CAACiE,KAAK,GAAG,KAAK;MACxB;IACJ;IACAjE,UAAU,CAACuE,KAAK,GAAGL,KAAK,CAACK,KAAK;IAC9BvE,UAAU,CAACwE,OAAO,GAAGN,KAAK,CAACM,OAAO;IAClCxE,UAAU,CAACiE,KAAK,GAAG,IAAI;EAC3B;EAEA,OAAcQ,iBAAiBA,CAACC,cAAiC,EAG/D;IACE,IAAMC,iBAA+B,GAAG;MACpCC,KAAK,EAAE,CAAC;MACRL,KAAK,EAAE,CAAC;MACRM,SAAS,EAAE,CAAC;MACZC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE,CAAC;MACjBC,UAAU,EAAE;IAChB,CAAC;IACD,IAAMC,iBAA+B,GAAG;MACpCL,KAAK,EAAE,CAAC;MACRL,KAAK,EAAE,CAAC;MACRM,SAAS,EAAE,CAAC;MACZC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE,CAAC;MACjBC,UAAU,EAAE;IAChB,CAAC;IAED,IAAME,eAAe,GAAGR,cAAc,CAACS,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACjB,OAAO,CAAC,CAAC,KAAK,QAAQ,CAAC;IAC9E,IAAMkB,cAAc,GAAGH,eAAe,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACE,IAAI,KAAK,OAAO,CAAC;IAExEJ,eAAe,CAACK,OAAO,CAAEC,KAAK,IAAK;MAC/B,IAAMC,YAAY,GAAGD,KAAK,CAACF,IAAI,KAAK,OAAO,GAAGX,iBAAiB,GAAGM,iBAAiB;MACnFQ,YAAY,CAACb,KAAK,EAAE;MACpB,IAAIY,KAAK,CAACvB,KAAK,IAAIuB,KAAK,CAACjB,KAAK,EAAE;QAC5BkB,YAAY,CAAClB,KAAK,EAAE;MACxB;MACA,IAAIkB,YAAY,CAACZ,SAAS,GAAGW,KAAK,CAACE,SAAS,CAAC,CAAC,EAAE;QAC5CD,YAAY,CAACZ,SAAS,GAAGW,KAAK,CAACE,SAAS,CAAC,CAAC;MAC9C;MACA,IAAID,YAAY,CAACX,aAAa,GAAGU,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC5C,WAAW,EAAE;QAC1D0C,YAAY,CAACX,aAAa,GAAGU,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC5C,WAAW;MAC5D;MACA,IAAIsC,cAAc,CAACO,MAAM,GAAG,CAAC,EAAE;QAAA,IAAAC,qBAAA,EAAAC,sBAAA;QAC3BL,YAAY,CAACV,cAAc,KAAAc,qBAAA,GAAIL,KAAK,CAACO,mBAAmB,CAAC,CAAC,cAAAF,qBAAA,uBAA3BA,qBAAA,CAA6Bd,cAAc;QAC1EU,YAAY,CAACT,UAAU,KAAAc,sBAAA,GAAIN,KAAK,CAACO,mBAAmB,CAAC,CAAC,cAAAD,sBAAA,uBAA3BA,sBAAA,CAA6BE,kBAAkB;MAC9E;IACJ,CAAC,CAAC;IAEF,OAAO;MAAEf,iBAAiB;MAAEN;IAAkB,CAAC;EACnD;EAEA,OAAcsB,WAAWA,CAACjG,UAA2B,EAAEkG,WAAgB,EAAQ;IAC3E,IAAIA,WAAW,CAAC1D,IAAI,KAAK,aAAa,EAAE;MACpC;IACJ;IAEA,IAAM2D,SAAS,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,MAAM;IACrC,IAAID,SAAS,KAAKnC,SAAS,EAAE;MACzB,IAAMoC,MAAM,GAAGvG,cAAc,CAAC8C,mBAAmB,CAACwD,SAAS,CAAC;MAC5DnG,UAAU,CAACqG,SAAS,CAAC1F,IAAI,CAACC,KAAK,CAACwF,MAAM,GAAG,IAAI,CAAC,CAAC;IACnD,CAAC,MAAM;MACHpG,UAAU,CAACqG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC5B;EACJ;EAEA,OAAcC,qBAAqBA,CAACtG,UAA2B,EAAEkG,WAAgB,EAAQ;IACrF,IAAIA,WAAW,CAAC1D,IAAI,KAAK,aAAa,EAAE;MACpC;IACJ;IACA,IAAM+D,WAAW,GAAI,IAAI,IAAGL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,oBAAoB,KAAIN,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEO,oBAAoB;IAClG,IAAMC,sBAAsB,GAAGH,WAAW,IAAGL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,gBAAgB;IAC1E,IAAMX,kBAAkB,GAAG,IAAI,IAAGE,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,oBAAoB;IACnExG,UAAU,CAAC4G,mBAAmB,CAACF,sBAAsB,EAAEV,kBAAkB,CAAC;EAC9E;AACJ","ignoreList":[]}