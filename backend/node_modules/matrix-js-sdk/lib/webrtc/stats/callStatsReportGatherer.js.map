{"version":3,"file":"callStatsReportGatherer.js","names":["ConnectionStats","ConnectionStatsBuilder","TransportStatsBuilder","MediaSsrcHandler","MediaTrackHandler","MediaTrackStatsHandler","TrackStatsBuilder","ConnectionStatsReportBuilder","ValueFormatter","logger","CallFeedStatsReporter","CallStatsReportGatherer","constructor","callId","opponentMemberId","pc","emitter","isFocus","arguments","length","undefined","_defineProperty","addEventListener","onSignalStateChange","bind","trackStats","processStats","groupCallId","localUserId","_this","_asyncToGenerator","summary","isFirstCollection","previousStatsReport","receivedMedia","receivedAudioMedia","receivedVideoMedia","audioTrackSummary","count","muted","maxPacketLoss","maxJitter","concealedAudio","totalAudio","videoTrackSummary","isActive","statsPromise","getStats","then","report","_this$connectionStats","_this$connectionStats2","currentStatsReport","result","processStatsReport","error","handleError","connectionStats","bitrate","download","audio","video","trackSummary","buildTrackSummary","Array","from","getTrack2stats","values","_objectSpread","catch","Promise","resolve","_this$currentStatsRep","byteSentStatsReport","Map","forEach","now","before","get","id","type","nominated","state","bandwidth","buildBandwidthReport","transport","buildReport","findTrack2Stats","buildPacketsLost","buildFramerateResolution","buildBitrateReceived","ts","findTransceiverByTrackId","trackId","setTrackStatsState","buildJitter","buildAudioConcealment","set","getNonNegativeValue","bytesSent","buildBitrateSend","buildCodec","kind","remoteSource","findLocalVideoTrackStats","calculateSimulcastFramerate","mediaTrackHandler","getActiveSimulcastStreams","emitByteSendReport","emitCallFeedReport","buildCallFeedReport","processAndEmitConnectionStatsReport","setActive","getActive","warn","concat","build","packetLoss","emitConnectionStatsReport","stopProcessingStats","signalingState","currentRemoteDescription","mediaSsrcHandler","parse","sdp","currentLocalDescription","setOpponentMemberId"],"sources":["../../../src/webrtc/stats/callStatsReportGatherer.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ConnectionStats } from \"./connectionStats.ts\";\nimport { type StatsReportEmitter } from \"./statsReportEmitter.ts\";\nimport { type ByteSend, type ByteSentStatsReport, type TrackID } from \"./statsReport.ts\";\nimport { ConnectionStatsBuilder } from \"./connectionStatsBuilder.ts\";\nimport { TransportStatsBuilder } from \"./transportStatsBuilder.ts\";\nimport { MediaSsrcHandler } from \"./media/mediaSsrcHandler.ts\";\nimport { MediaTrackHandler } from \"./media/mediaTrackHandler.ts\";\nimport { MediaTrackStatsHandler } from \"./media/mediaTrackStatsHandler.ts\";\nimport { TrackStatsBuilder } from \"./trackStatsBuilder.ts\";\nimport { ConnectionStatsReportBuilder } from \"./connectionStatsReportBuilder.ts\";\nimport { ValueFormatter } from \"./valueFormatter.ts\";\nimport { type CallStatsReportSummary } from \"./callStatsReportSummary.ts\";\nimport { logger } from \"../../logger.ts\";\nimport { CallFeedStatsReporter } from \"./callFeedStatsReporter.ts\";\n\nexport class CallStatsReportGatherer {\n    private isActive = true;\n    private previousStatsReport: RTCStatsReport | undefined;\n    private currentStatsReport: RTCStatsReport | undefined;\n    private readonly connectionStats = new ConnectionStats();\n\n    private readonly trackStats: MediaTrackStatsHandler;\n\n    public constructor(\n        public readonly callId: string,\n        private opponentMemberId: string,\n        private readonly pc: RTCPeerConnection,\n        private readonly emitter: StatsReportEmitter,\n        private readonly isFocus = true,\n    ) {\n        pc.addEventListener(\"signalingstatechange\", this.onSignalStateChange.bind(this));\n        this.trackStats = new MediaTrackStatsHandler(new MediaSsrcHandler(), new MediaTrackHandler(pc));\n    }\n\n    public async processStats(groupCallId: string, localUserId: string): Promise<CallStatsReportSummary> {\n        const summary = {\n            isFirstCollection: this.previousStatsReport === undefined,\n            receivedMedia: 0,\n            receivedAudioMedia: 0,\n            receivedVideoMedia: 0,\n            audioTrackSummary: { count: 0, muted: 0, maxPacketLoss: 0, maxJitter: 0, concealedAudio: 0, totalAudio: 0 },\n            videoTrackSummary: { count: 0, muted: 0, maxPacketLoss: 0, maxJitter: 0, concealedAudio: 0, totalAudio: 0 },\n        } as CallStatsReportSummary;\n        if (this.isActive) {\n            const statsPromise = this.pc.getStats();\n            if (typeof statsPromise?.then === \"function\") {\n                return statsPromise\n                    .then((report) => {\n                        // @ts-ignore\n                        this.currentStatsReport = typeof report?.result === \"function\" ? report.result() : report;\n\n                        try {\n                            this.processStatsReport(groupCallId, localUserId);\n                        } catch (error) {\n                            this.handleError(error);\n                            return summary;\n                        }\n\n                        this.previousStatsReport = this.currentStatsReport;\n                        summary.receivedMedia = this.connectionStats.bitrate.download;\n                        summary.receivedAudioMedia = this.connectionStats.bitrate.audio?.download || 0;\n                        summary.receivedVideoMedia = this.connectionStats.bitrate.video?.download || 0;\n                        const trackSummary = TrackStatsBuilder.buildTrackSummary(\n                            Array.from(this.trackStats.getTrack2stats().values()),\n                        );\n                        return {\n                            ...summary,\n                            audioTrackSummary: trackSummary.audioTrackSummary,\n                            videoTrackSummary: trackSummary.videoTrackSummary,\n                        };\n                    })\n                    .catch((error) => {\n                        this.handleError(error);\n                        return summary;\n                    });\n            }\n            this.isActive = false;\n        }\n        return Promise.resolve(summary);\n    }\n\n    private processStatsReport(groupCallId: string, localUserId: string): void {\n        const byteSentStatsReport: ByteSentStatsReport = new Map<TrackID, ByteSend>() as ByteSentStatsReport;\n        byteSentStatsReport.callId = this.callId;\n        byteSentStatsReport.opponentMemberId = this.opponentMemberId;\n\n        this.currentStatsReport?.forEach((now) => {\n            const before = this.previousStatsReport ? this.previousStatsReport.get(now.id) : null;\n            // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n            if (now.type === \"candidate-pair\" && now.nominated && now.state === \"succeeded\") {\n                this.connectionStats.bandwidth = ConnectionStatsBuilder.buildBandwidthReport(now);\n                this.connectionStats.transport = TransportStatsBuilder.buildReport(\n                    this.currentStatsReport,\n                    now,\n                    this.connectionStats.transport,\n                    this.isFocus,\n                );\n\n                // RTCReceivedRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n                // RTCSentRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n            } else if (now.type === \"inbound-rtp\" || now.type === \"outbound-rtp\") {\n                const trackStats = this.trackStats.findTrack2Stats(\n                    now,\n                    now.type === \"inbound-rtp\" ? \"remote\" : \"local\",\n                );\n                if (!trackStats) {\n                    return;\n                }\n\n                if (before) {\n                    TrackStatsBuilder.buildPacketsLost(trackStats, now, before);\n                }\n\n                // Get the resolution and framerate for only remote video sources here. For the local video sources,\n                // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n                // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n                // more calculations needed to determine what is the highest resolution stream sent by the client if the\n                // 'outbound-rtp' stats are used.\n                if (now.type === \"inbound-rtp\") {\n                    TrackStatsBuilder.buildFramerateResolution(trackStats, now);\n                    if (before) {\n                        TrackStatsBuilder.buildBitrateReceived(trackStats, now, before);\n                    }\n                    const ts = this.trackStats.findTransceiverByTrackId(trackStats.trackId);\n                    TrackStatsBuilder.setTrackStatsState(trackStats, ts);\n                    TrackStatsBuilder.buildJitter(trackStats, now);\n                    TrackStatsBuilder.buildAudioConcealment(trackStats, now);\n                } else if (before) {\n                    byteSentStatsReport.set(trackStats.trackId, ValueFormatter.getNonNegativeValue(now.bytesSent));\n                    TrackStatsBuilder.buildBitrateSend(trackStats, now, before);\n                }\n                TrackStatsBuilder.buildCodec(this.currentStatsReport, trackStats, now);\n            } else if (now.type === \"track\" && now.kind === \"video\" && !now.remoteSource) {\n                const trackStats = this.trackStats.findLocalVideoTrackStats(now);\n                if (!trackStats) {\n                    return;\n                }\n                TrackStatsBuilder.buildFramerateResolution(trackStats, now);\n                TrackStatsBuilder.calculateSimulcastFramerate(\n                    trackStats,\n                    now,\n                    before,\n                    this.trackStats.mediaTrackHandler.getActiveSimulcastStreams(),\n                );\n            }\n        });\n\n        this.emitter.emitByteSendReport(byteSentStatsReport);\n        this.emitter.emitCallFeedReport(\n            CallFeedStatsReporter.buildCallFeedReport(this.callId, this.opponentMemberId, this.pc),\n        );\n        this.processAndEmitConnectionStatsReport();\n    }\n\n    public setActive(isActive: boolean): void {\n        this.isActive = isActive;\n    }\n\n    public getActive(): boolean {\n        return this.isActive;\n    }\n\n    private handleError(error: any): void {\n        this.isActive = false;\n        logger.warn(`CallStatsReportGatherer ${this.callId} processStatsReport fails and set to inactive ${error}`);\n    }\n\n    private processAndEmitConnectionStatsReport(): void {\n        const report = ConnectionStatsReportBuilder.build(this.trackStats.getTrack2stats());\n        report.callId = this.callId;\n        report.opponentMemberId = this.opponentMemberId;\n\n        this.connectionStats.bandwidth = report.bandwidth;\n        this.connectionStats.bitrate = report.bitrate;\n        this.connectionStats.packetLoss = report.packetLoss;\n\n        this.emitter.emitConnectionStatsReport({\n            ...report,\n            transport: this.connectionStats.transport,\n        });\n\n        this.connectionStats.transport = [];\n    }\n\n    public stopProcessingStats(): void {}\n\n    private onSignalStateChange(): void {\n        if (this.pc.signalingState === \"stable\") {\n            if (this.pc.currentRemoteDescription) {\n                this.trackStats.mediaSsrcHandler.parse(this.pc.currentRemoteDescription.sdp, \"remote\");\n            }\n            if (this.pc.currentLocalDescription) {\n                this.trackStats.mediaSsrcHandler.parse(this.pc.currentLocalDescription.sdp, \"local\");\n            }\n        }\n    }\n\n    public setOpponentMemberId(id: string): void {\n        this.opponentMemberId = id;\n    }\n}\n"],"mappings":"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","ignoreList":[]}