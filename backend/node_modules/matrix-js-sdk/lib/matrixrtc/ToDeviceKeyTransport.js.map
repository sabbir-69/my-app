{"version":3,"file":"ToDeviceKeyTransport.js","names":["TypedEventEmitter","KeyTransportEvents","logger","rootLogger","ClientEvent","EventType","NotSupportedError","Error","constructor","message","name","ToDeviceKeyTransport","setParentLogger","parentLogger","getChild","userId","deviceId","roomId","client","statistics","_defineProperty","event","getType","CallEncryptionKeysPrefix","content","getValidEventContent","getSender","receiveCallKeyEvent","start","on","ToDeviceEvent","onToDeviceEvent","stop","off","sendKey","keyBase64Encoded","index","members","_this","_asyncToGenerator","keys","key","room_id","member","claimed_device_id","session","call_id","application","scope","targets","filter","sender","undefined","warn","concat","map","length","encryptAndSendToDevice","catch","error","msg","includes","counters","roomEventEncryptionKeysSent","fromUser","roomEventEncryptionKeysReceived","now","Date","age","sent_ts","totals","roomEventEncryptionKeysReceivedTotalAge","emit","ReceivedKeys","getContent"],"sources":["../../src/matrixrtc/ToDeviceKeyTransport.ts"],"sourcesContent":["/*\nCopyright 2025 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type WidgetApiResponseError } from \"matrix-widget-api\";\n\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { type IKeyTransport, KeyTransportEvents, type KeyTransportEventsHandlerMap } from \"./IKeyTransport.ts\";\nimport { type Logger, logger as rootLogger } from \"../logger.ts\";\nimport type { CallMembership } from \"./CallMembership.ts\";\nimport type { EncryptionKeysToDeviceEventContent, Statistics } from \"./types.ts\";\nimport { ClientEvent, type MatrixClient } from \"../client.ts\";\nimport type { MatrixEvent } from \"../models/event.ts\";\nimport { EventType } from \"../@types/event.ts\";\n\nexport class NotSupportedError extends Error {\n    public constructor(message?: string) {\n        super(message);\n    }\n    public get name(): string {\n        return \"NotSupportedError\";\n    }\n}\n/**\n * ToDeviceKeyTransport is used to send MatrixRTC keys to other devices using the\n * to-device CS-API.\n */\nexport class ToDeviceKeyTransport\n    extends TypedEventEmitter<KeyTransportEvents, KeyTransportEventsHandlerMap>\n    implements IKeyTransport\n{\n    private logger: Logger = rootLogger;\n    public setParentLogger(parentLogger: Logger): void {\n        this.logger = parentLogger.getChild(`[ToDeviceKeyTransport]`);\n    }\n\n    public constructor(\n        private userId: string,\n        private deviceId: string,\n        private roomId: string,\n        private client: Pick<MatrixClient, \"encryptAndSendToDevice\" | \"on\" | \"off\">,\n        private statistics: Statistics,\n        parentLogger?: Logger,\n    ) {\n        super();\n        this.setParentLogger(parentLogger ?? rootLogger);\n    }\n\n    public start(): void {\n        this.client.on(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\n    }\n\n    public stop(): void {\n        this.client.off(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\n    }\n\n    public async sendKey(keyBase64Encoded: string, index: number, members: CallMembership[]): Promise<void> {\n        const content: EncryptionKeysToDeviceEventContent = {\n            keys: {\n                index: index,\n                key: keyBase64Encoded,\n            },\n            room_id: this.roomId,\n            member: {\n                claimed_device_id: this.deviceId,\n            },\n            session: {\n                call_id: \"\",\n                application: \"m.call\",\n                scope: \"m.room\",\n            },\n        };\n\n        const targets = members\n            .filter((member) => {\n                // filter malformed call members\n                if (member.sender == undefined || member.deviceId == undefined) {\n                    this.logger.warn(`Malformed call member: ${member.sender}|${member.deviceId}`);\n                    return false;\n                }\n                // Filter out me\n                return !(member.sender == this.userId && member.deviceId == this.deviceId);\n            })\n            .map((member) => {\n                return {\n                    userId: member.sender!,\n                    deviceId: member.deviceId!,\n                };\n            });\n\n        if (targets.length > 0) {\n            await this.client\n                .encryptAndSendToDevice(EventType.CallEncryptionKeysPrefix, targets, content)\n                .catch((error: WidgetApiResponseError) => {\n                    const msg: string = error.message;\n                    // This is not ideal. We would want to have a custom error type for unsupported actions.\n                    // This is not part of the widget API spec. Since as of now there are only two implementations:\n                    // Rust SDK + JS-SDK, and the JS-SDK does support to-device sending, we can assume that\n                    // this is a widget driver issue error message.\n                    if (\n                        (msg.includes(\"unknown variant\") && msg.includes(\"send_to_device\")) ||\n                        msg.includes(\"not supported\")\n                    ) {\n                        throw new NotSupportedError(\"The widget driver does not support to-device encryption\");\n                    }\n                });\n            this.statistics.counters.roomEventEncryptionKeysSent += 1;\n        } else {\n            this.logger.warn(\"No targets found for sending key\");\n        }\n    }\n\n    private receiveCallKeyEvent(fromUser: string, content: EncryptionKeysToDeviceEventContent): void {\n        // The event has already been validated at this point.\n\n        this.statistics.counters.roomEventEncryptionKeysReceived += 1;\n\n        // What is this, and why is it needed?\n        // Also to device events do not have an origin server ts\n        const now = Date.now();\n        const age = now - (typeof content.sent_ts === \"number\" ? content.sent_ts : now);\n        this.statistics.totals.roomEventEncryptionKeysReceivedTotalAge += age;\n\n        this.emit(\n            KeyTransportEvents.ReceivedKeys,\n            // TODO this is claimed information\n            fromUser,\n            // TODO: This is claimed information\n            content.member.claimed_device_id!,\n            content.keys.key,\n            content.keys.index,\n            now,\n        );\n    }\n\n    private onToDeviceEvent = (event: MatrixEvent): void => {\n        if (event.getType() !== EventType.CallEncryptionKeysPrefix) {\n            // Ignore this is not a call encryption event\n            return;\n        }\n\n        // TODO: Not possible to check if the event is encrypted or not\n        // see https://github.com/matrix-org/matrix-rust-sdk/issues/4883\n        // if (evnt.getWireType() != EventType.RoomMessageEncrypted) {\n        //     // WARN: The call keys were sent in clear. Ignore them\n        //     logger.warn(`Call encryption keys sent in clear from: ${event.getSender()}`);\n        //     return;\n        // }\n\n        const content = this.getValidEventContent(event);\n        if (!content) return;\n\n        if (!event.getSender()) return;\n\n        this.receiveCallKeyEvent(event.getSender()!, content);\n    };\n\n    private getValidEventContent(event: MatrixEvent): EncryptionKeysToDeviceEventContent | undefined {\n        const content = event.getContent();\n        const roomId = content.room_id;\n        if (!roomId) {\n            // Invalid event\n            this.logger.warn(\"Malformed Event: invalid call encryption keys event, no roomId\");\n            return;\n        }\n        if (roomId !== this.roomId) {\n            this.logger.warn(\"Malformed Event: Mismatch roomId\");\n            return;\n        }\n\n        if (!content.keys || !content.keys.key || typeof content.keys.index !== \"number\") {\n            this.logger.warn(\"Malformed Event: Missing keys field\");\n            return;\n        }\n\n        if (!content.member || !content.member.claimed_device_id) {\n            this.logger.warn(\"Malformed Event: Missing claimed_device_id\");\n            return;\n        }\n\n        // TODO check for session related fields once the to-device encryption uses the new format.\n        return content as EncryptionKeysToDeviceEventContent;\n    }\n}\n"],"mappings":"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","ignoreList":[]}