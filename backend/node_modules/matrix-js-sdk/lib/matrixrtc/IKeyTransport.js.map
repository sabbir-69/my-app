{"version":3,"file":"IKeyTransport.js","names":["KeyTransportEvents"],"sources":["../../src/matrixrtc/IKeyTransport.ts"],"sourcesContent":["/*\nCopyright 2025 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type CallMembership } from \"./CallMembership.ts\";\n\nexport enum KeyTransportEvents {\n    ReceivedKeys = \"received_keys\",\n    NotSupportedError = \"not_supported_error\",\n}\n\nexport type KeyTransportEventsHandlerMap = {\n    [KeyTransportEvents.ReceivedKeys]: KeyTransportEventListener;\n    [KeyTransportEvents.NotSupportedError]: () => void;\n};\n\nexport type KeyTransportEventListener = (\n    userId: string,\n    deviceId: string,\n    keyBase64Encoded: string,\n    index: number,\n    timestamp: number,\n) => void;\n\n/**\n * Generic interface for the transport used to share room keys.\n * Keys can be shared using different transports, e.g. to-device messages or room messages.\n */\nexport interface IKeyTransport {\n    /**\n     * Sends the current user media key to the given members.\n     * @param keyBase64Encoded\n     * @param index\n     * @param members - The participants that should get they key\n     */\n    sendKey(keyBase64Encoded: string, index: number, members: CallMembership[]): Promise<void>;\n\n    /** Subscribe to keys from this transport. */\n    on(event: KeyTransportEvents.ReceivedKeys, listener: KeyTransportEventListener): this;\n    /** Unsubscribe from keys from this transport. */\n    off(event: KeyTransportEvents.ReceivedKeys, listener: KeyTransportEventListener): this;\n\n    /** Once start is called the underlying transport will subscribe to its transport system.\n     * Before start is called this transport will not emit any events.\n     */\n    start(): void;\n    /** Once stop is called the underlying transport will unsubscribe from its transport system.\n     * After stop is called this transport will not emit any events.\n     */\n    stop(): void;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,WAAYA,kBAAkB,0BAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAA,OAAlBA,kBAAkB;AAAA;;AAkB9B;AACA;AACA;AACA","ignoreList":[]}