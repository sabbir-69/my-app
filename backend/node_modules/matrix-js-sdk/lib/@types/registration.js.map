{"version":3,"file":"registration.js","names":[],"sources":["../../src/@types/registration.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type AuthDict } from \"../interactive-auth.ts\";\n\n/**\n * The request body of a call to `POST /_matrix/client/v3/register`.\n *\n * @see https://spec.matrix.org/v1.7/client-server-api/#post_matrixclientv3register\n */\nexport interface RegisterRequest {\n    /**\n     * Additional authentication information for the user-interactive authentication API.\n     * Note that this information is not used to define how the registered user should be authenticated,\n     * but is instead used to authenticate the register call itself.\n     */\n    auth?: AuthDict;\n    /**\n     * The basis for the localpart of the desired Matrix ID.\n     * If omitted, the homeserver MUST generate a Matrix ID local part.\n     */\n    username?: string;\n    /**\n     * The desired password for the account.\n     */\n    password?: string;\n    /**\n     * If true, the client supports refresh tokens.\n     */\n    refresh_token?: boolean;\n    /**\n     * If true, an access_token and device_id should not be returned from this call, therefore preventing an automatic login.\n     * Defaults to false.\n     */\n    inhibit_login?: boolean;\n    /**\n     * A display name to assign to the newly-created device.\n     * Ignored if device_id corresponds to a known device.\n     */\n    initial_device_display_name?: string;\n    /**\n     * Guest users can also upgrade their account by going through the ordinary register flow,\n     * but specifying the additional POST parameter guest_access_token containing the guestâ€™s access token.\n     * They are also required to specify the username parameter to the value of the local part of their username,\n     * which is otherwise optional.\n     * @see https://spec.matrix.org/v1.10/client-server-api/#guest-access\n     */\n    guest_access_token?: string;\n}\n\n/**\n * The result of a successful call to `POST /_matrix/client/v3/register`.\n *\n * @see https://spec.matrix.org/v1.7/client-server-api/#post_matrixclientv3register\n */\nexport interface RegisterResponse {\n    /**\n     * The fully-qualified Matrix user ID (MXID) that has been registered.\n     */\n    user_id: string;\n    /**\n     * An access token for the account.\n     * This access token can then be used to authorize other requests.\n     * Required if the inhibit_login option is false.\n     */\n    access_token?: string;\n    /**\n     * ID of the registered device.\n     * Will be the same as the corresponding parameter in the request, if one was specified.\n     * Required if the inhibit_login option is false.\n     */\n    device_id?: string;\n    /**\n     * The lifetime of the access token, in milliseconds.\n     * Once the access token has expired a new access token can be obtained by using the provided refresh token.\n     * If no refresh token is provided, the client will need to re-log in to obtain a new access token.\n     * If not given, the client can assume that the access token will not expire.\n     *\n     * Omitted if the inhibit_login option is true.\n     */\n    expires_in_ms?: number;\n    /**\n     * A refresh token for the account.\n     * This token can be used to obtain a new access token when it expires by calling the /refresh endpoint.\n     *\n     * Omitted if the inhibit_login option is true.\n     */\n    refresh_token?: string;\n}\n"],"mappings":"","ignoreList":[]}