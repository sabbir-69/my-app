{"version":3,"file":"events.js","names":[],"sources":["../../src/@types/events.ts"],"sourcesContent":["/*\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type MsgType, type RelationType } from \"./event.ts\";\nimport { type FileInfo, type ImageInfo, type MediaEventContent } from \"./media.ts\";\nimport { type XOR } from \"./common.ts\";\n\ninterface BaseTimelineEvent {\n    \"body\": string;\n    \"m.mentions\"?: {\n        user_ids?: string[];\n        room?: boolean;\n    };\n}\n\ninterface ReplyEvent {\n    \"m.relates_to\"?: {\n        \"m.in_reply_to\"?: {\n            event_id: string;\n        };\n    };\n}\n\ninterface NoRelationEvent {\n    \"m.new_content\"?: never;\n    \"m.relates_to\"?: never;\n}\n\n/**\n * Partial content format of timeline events with rel_type `m.replace`\n *\n * @see https://spec.matrix.org/v1.9/client-server-api/#event-replacements\n */\nexport interface ReplacementEvent<T> {\n    \"m.new_content\": T;\n    \"m.relates_to\": {\n        event_id: string;\n        rel_type: RelationType.Replace;\n    };\n}\n\n/**\n * Partial content format of timeline events with rel_type other than `m.replace`\n *\n * @see https://spec.matrix.org/v1.9/client-server-api/#forming-relationships-between-events\n */\nexport interface RelationEvent {\n    \"m.new_content\"?: never;\n    \"m.relates_to\": {\n        event_id: string;\n        rel_type: Exclude<RelationType, RelationType.Replace>;\n    };\n}\n\n/**\n * Content format of timeline events with type `m.room.message` and `msgtype` `m.text`, `m.emote`, or `m.notice`\n *\n * @see https://spec.matrix.org/v1.9/client-server-api/#mroommessage\n */\nexport interface RoomMessageTextEventContent extends BaseTimelineEvent {\n    msgtype: MsgType.Text | MsgType.Emote | MsgType.Notice;\n    format?: \"org.matrix.custom.html\";\n    formatted_body?: string;\n}\n\n/**\n * Content format of timeline events with type `m.room.message` and `msgtype` `m.location`\n *\n * @see https://spec.matrix.org/v1.9/client-server-api/#mlocation\n */\nexport interface RoomMessageLocationEventContent extends BaseTimelineEvent {\n    body: string;\n    geo_uri: string;\n    info: Pick<FileInfo, \"thumbnail_info\" | \"thumbnail_file\" | \"thumbnail_url\">;\n    msgtype: MsgType.Location;\n}\n\ntype MessageEventContent = RoomMessageTextEventContent | RoomMessageLocationEventContent | MediaEventContent;\n\nexport type RoomMessageEventContent = BaseTimelineEvent &\n    XOR<XOR<ReplacementEvent<MessageEventContent>, RelationEvent>, XOR<ReplyEvent, NoRelationEvent>> &\n    MessageEventContent;\n\n/**\n * Content format of timeline events with type `m.sticker`\n *\n * @see https://spec.matrix.org/v1.9/client-server-api/#msticker\n */\nexport interface StickerEventContent extends BaseTimelineEvent {\n    body: string;\n    info: ImageInfo;\n    url: string;\n}\n\n/**\n * Content format of timeline events with type `m.reaction`\n *\n * @see https://spec.matrix.org/v1.9/client-server-api/#mreaction\n */\nexport interface ReactionEventContent {\n    \"m.relates_to\": {\n        event_id: string;\n        key: string;\n        rel_type: RelationType.Annotation;\n    };\n}\n"],"mappings":"","ignoreList":[]}