{"version":3,"file":"global.d.js","names":[],"sources":["../../src/@types/global.d.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport {};\n\ndeclare global {\n    // use `number` as the return type in all cases for globalThis.set{Interval,Timeout},\n    // so we don't accidentally use the methods on NodeJS.Timeout - they only exist in a subset of environments.\n    // The overload for clear{Interval,Timeout} is resolved as expected.\n    // We use `ReturnType<typeof setTimeout>` in the code to be agnostic of if this definition gets loaded.\n    function setInterval(handler: TimerHandler, timeout: number, ...arguments: any[]): number;\n    function setTimeout(handler: TimerHandler, timeout: number, ...arguments: any[]): number;\n\n    namespace NodeJS {\n        interface Global {\n            // marker variable used to detect both the browser & node entrypoints being used at once\n            __js_sdk_entrypoint: unknown;\n        }\n    }\n\n    // Chrome-specific getUserMedia constraints\n    interface MediaTrackConstraints {\n        mandatory?: {\n            chromeMediaSource: string;\n            chromeMediaSourceId: string;\n        };\n    }\n\n    interface Navigator {\n        // We check for the webkit-prefixed getUserMedia to detect if we're\n        // on webkit: we should check if we still need to do this\n        webkitGetUserMedia?: unknown;\n    }\n\n    export interface Uint8ArrayToBase64Options {\n        alphabet?: \"base64\" | \"base64url\";\n        omitPadding?: boolean;\n    }\n\n    interface Uint8Array {\n        // https://tc39.es/proposal-arraybuffer-base64/spec/#sec-uint8array.prototype.tobase64\n        toBase64?(options?: Uint8ArrayToBase64Options): string;\n    }\n\n    export interface Uint8ArrayFromBase64Options {\n        alphabet?: \"base64\"; // Our fallback code only handles base64.\n        lastChunkHandling?: \"loose\"; // Our fallback code doesn't support other handling at this time.\n    }\n\n    interface Uint8ArrayConstructor {\n        // https://tc39.es/proposal-arraybuffer-base64/spec/#sec-uint8array.frombase64\n        fromBase64?(base64: string, options?: Uint8ArrayFromBase64Options): Uint8Array;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]}