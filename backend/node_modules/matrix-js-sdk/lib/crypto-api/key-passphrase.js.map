{"version":3,"file":"key-passphrase.js","names":["DEFAULT_BIT_SIZE","deriveRecoveryKeyFromPassphrase","_x","_x2","_x3","_deriveRecoveryKeyFromPassphrase","apply","arguments","_asyncToGenerator","passphrase","salt","iterations","numBits","length","undefined","globalThis","crypto","subtle","TextEncoder","Error","key","importKey","encode","name","keybits","deriveBits","hash","Uint8Array"],"sources":["../../src/crypto-api/key-passphrase.ts"],"sourcesContent":["/*\n * Copyright 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_BIT_SIZE = 256;\n\n/**\n * Derive a recovery key from a passphrase and salt using PBKDF2.\n * @see https://spec.matrix.org/v1.11/client-server-api/#deriving-keys-from-passphrases\n *\n * @param passphrase - The passphrase to derive the key from\n * @param salt - The salt to use in the derivation\n * @param iterations - The number of iterations to use in the derivation\n * @param numBits - The number of bits to derive\n */\nexport async function deriveRecoveryKeyFromPassphrase(\n    passphrase: string,\n    salt: string,\n    iterations: number,\n    numBits = DEFAULT_BIT_SIZE,\n): Promise<Uint8Array> {\n    if (!globalThis.crypto.subtle || !TextEncoder) {\n        throw new Error(\"Password-based backup is not available on this platform\");\n    }\n\n    const key = await globalThis.crypto.subtle.importKey(\n        \"raw\",\n        new TextEncoder().encode(passphrase),\n        { name: \"PBKDF2\" },\n        false,\n        [\"deriveBits\"],\n    );\n\n    const keybits = await globalThis.crypto.subtle.deriveBits(\n        {\n            name: \"PBKDF2\",\n            salt: new TextEncoder().encode(salt),\n            iterations: iterations,\n            hash: \"SHA-512\",\n        },\n        key,\n        numBits,\n    );\n\n    return new Uint8Array(keybits);\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,gBAAgB,GAAG,GAAG;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBC,+BAA+BA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,gCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA8BpD,SAAAF,iCAAA;EAAAA,gCAAA,GAAAG,iBAAA,CA9BM,WACHC,UAAkB,EAClBC,IAAY,EACZC,UAAkB,EAEC;IAAA,IADnBC,OAAO,GAAAL,SAAA,CAAAM,MAAA,QAAAN,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAAGP,gBAAgB;IAE1B,IAAI,CAACe,UAAU,CAACC,MAAM,CAACC,MAAM,IAAI,CAACC,WAAW,EAAE;MAC3C,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;IAC9E;IAEA,IAAMC,GAAG,SAASL,UAAU,CAACC,MAAM,CAACC,MAAM,CAACI,SAAS,CAChD,KAAK,EACL,IAAIH,WAAW,CAAC,CAAC,CAACI,MAAM,CAACb,UAAU,CAAC,EACpC;MAAEc,IAAI,EAAE;IAAS,CAAC,EAClB,KAAK,EACL,CAAC,YAAY,CACjB,CAAC;IAED,IAAMC,OAAO,SAAST,UAAU,CAACC,MAAM,CAACC,MAAM,CAACQ,UAAU,CACrD;MACIF,IAAI,EAAE,QAAQ;MACdb,IAAI,EAAE,IAAIQ,WAAW,CAAC,CAAC,CAACI,MAAM,CAACZ,IAAI,CAAC;MACpCC,UAAU,EAAEA,UAAU;MACtBe,IAAI,EAAE;IACV,CAAC,EACDN,GAAG,EACHR,OACJ,CAAC;IAED,OAAO,IAAIe,UAAU,CAACH,OAAO,CAAC;EAClC,CAAC;EAAA,OAAAnB,gCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}