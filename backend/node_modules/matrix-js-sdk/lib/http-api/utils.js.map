{"version":3,"file":"utils.js","names":["parse","parseContentType","logger","sleep","ConnectionError","HTTPError","MatrixError","safeGetRetryAfterMs","timeoutSignal","ms","controller","AbortController","setTimeout","abort","signal","anySignal","signals","cleanup","removeEventListener","onAbort","aborted","addEventListener","parseErrorResponse","response","body","_contentType","_contentType2","httpHeaders","isXhr","Headers","getAllResponseHeaders","trim","split","map","header","colonIdx","indexOf","substring","headers","contentType","getResponseContentType","e","type","JSON","status","responseURL","url","undefined","concat","get","Error","retryNetworkOperation","_x","_x2","_retryNetworkOperation","apply","arguments","_asyncToGenerator","maxAttempts","callback","attempts","lastConnectionError","timeout","Math","pow","log","err","calculateRetryBackoff","retryConnectionError","httpStatus","floor","name"],"sources":["../../src/http-api/utils.ts"],"sourcesContent":["/*\nCopyright 2022 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { parse as parseContentType, type ParsedMediaType } from \"content-type\";\n\nimport { logger } from \"../logger.ts\";\nimport { sleep } from \"../utils.ts\";\nimport { ConnectionError, HTTPError, MatrixError, safeGetRetryAfterMs } from \"./errors.ts\";\n\n// Ponyfill for https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/timeout\nexport function timeoutSignal(ms: number): AbortSignal {\n    const controller = new AbortController();\n    setTimeout(() => {\n        controller.abort();\n    }, ms);\n\n    return controller.signal;\n}\n\nexport function anySignal(signals: AbortSignal[]): {\n    signal: AbortSignal;\n    cleanup(): void;\n} {\n    const controller = new AbortController();\n\n    function cleanup(): void {\n        for (const signal of signals) {\n            signal.removeEventListener(\"abort\", onAbort);\n        }\n    }\n\n    function onAbort(): void {\n        controller.abort();\n        cleanup();\n    }\n\n    for (const signal of signals) {\n        if (signal.aborted) {\n            onAbort();\n            break;\n        }\n        signal.addEventListener(\"abort\", onAbort);\n    }\n\n    return {\n        signal: controller.signal,\n        cleanup,\n    };\n}\n\n/**\n * Attempt to turn an HTTP error response into a Javascript Error.\n *\n * If it is a JSON response, we will parse it into a MatrixError. Otherwise\n * we return a generic Error.\n *\n * @param response - response object\n * @param body - raw body of the response\n * @returns\n */\nexport function parseErrorResponse(response: XMLHttpRequest | Response, body?: string): Error {\n    const httpHeaders = isXhr(response)\n        ? new Headers(\n              response\n                  .getAllResponseHeaders()\n                  .trim()\n                  .split(/[\\r\\n]+/)\n                  .map((header): [string, string] => {\n                      const colonIdx = header.indexOf(\":\");\n                      return [header.substring(0, colonIdx), header.substring(colonIdx + 1)];\n                  }),\n          )\n        : response.headers;\n\n    let contentType: ParsedMediaType | null;\n    try {\n        contentType = getResponseContentType(httpHeaders);\n    } catch (e) {\n        return <Error>e;\n    }\n    if (contentType?.type === \"application/json\" && body) {\n        return new MatrixError(\n            JSON.parse(body),\n            response.status,\n            isXhr(response) ? response.responseURL : response.url,\n            undefined,\n            httpHeaders,\n        );\n    }\n    if (contentType?.type === \"text/plain\") {\n        return new HTTPError(`Server returned ${response.status} error: ${body}`, response.status, httpHeaders);\n    }\n    return new HTTPError(`Server returned ${response.status} error`, response.status, httpHeaders);\n}\n\nfunction isXhr(response: XMLHttpRequest | Response): response is XMLHttpRequest {\n    return \"getResponseHeader\" in response;\n}\n\n/**\n * extract the Content-Type header from response headers, and\n * parse it to a `{type, parameters}` object.\n *\n * returns null if no content-type header could be found.\n *\n * @param response - response object\n * @returns parsed content-type header, or null if not found\n */\nfunction getResponseContentType(headers: Headers): ParsedMediaType | null {\n    const contentType = headers.get(\"Content-Type\");\n    if (contentType === null) return null;\n\n    try {\n        return parseContentType(contentType);\n    } catch (e) {\n        throw new Error(`Error parsing Content-Type '${contentType}': ${e}`);\n    }\n}\n\n/**\n * Retries a network operation run in a callback.\n * @param maxAttempts - maximum attempts to try\n * @param callback - callback that returns a promise of the network operation. If rejected with ConnectionError, it will be retried by calling the callback again.\n * @returns the result of the network operation\n * @throws {@link ConnectionError} If after maxAttempts the callback still throws ConnectionError\n */\nexport async function retryNetworkOperation<T>(maxAttempts: number, callback: () => Promise<T>): Promise<T> {\n    let attempts = 0;\n    let lastConnectionError: ConnectionError | null = null;\n    while (attempts < maxAttempts) {\n        try {\n            if (attempts > 0) {\n                const timeout = 1000 * Math.pow(2, attempts);\n                logger.log(`network operation failed ${attempts} times, retrying in ${timeout}ms...`);\n                await sleep(timeout);\n            }\n            return await callback();\n        } catch (err) {\n            if (err instanceof ConnectionError) {\n                attempts += 1;\n                lastConnectionError = err;\n            } else {\n                throw err;\n            }\n        }\n    }\n    throw lastConnectionError;\n}\n\n/**\n * Calculate the backoff time for a request retry attempt.\n * This produces wait times of 2, 4, 8, and 16 seconds (30s total) after which we give up. If the\n * failure was due to a rate limited request, the time specified in the error is returned.\n *\n * Returns -1 if the error is not retryable, or if we reach the maximum number of attempts.\n *\n * @param err - The error thrown by the http call\n * @param attempts - The number of attempts made so far, including the one that just failed.\n * @param retryConnectionError - Whether to retry on {@link ConnectionError} (CORS, connection is down, etc.)\n */\nexport function calculateRetryBackoff(err: any, attempts: number, retryConnectionError: boolean): number {\n    if (attempts > 4) {\n        return -1; // give up\n    }\n\n    if (err instanceof ConnectionError && !retryConnectionError) {\n        return -1;\n    }\n\n    if (err.httpStatus && Math.floor(err.httpStatus / 100) === 4 && err.httpStatus !== 429) {\n        // client error; no amount of retrying will save you now (except for rate limiting which is handled below)\n        return -1;\n    }\n\n    if (err.name === \"AbortError\") {\n        // this is a client timeout, that is already very high 60s/80s\n        // we don't want to retry, as it could do it for very long\n        return -1;\n    }\n\n    // If we are trying to send an event (or similar) that is too large in any way, then retrying won't help\n    if (err.name === \"M_TOO_LARGE\") {\n        return -1;\n    }\n\n    return safeGetRetryAfterMs(err, 1000 * Math.pow(2, attempts));\n}\n"],"mappings":"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","ignoreList":[]}