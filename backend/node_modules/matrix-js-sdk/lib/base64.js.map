{"version":3,"file":"base64.js","names":["toBase64","uint8Array","options","base64","btoa","reduce","acc","current","String","fromCharCode","omitPadding","replace","alphabet","encodeBase64","encodeUnpaddedBase64","encodeUnpaddedBase64Url","fromBase64","Uint8Array","from","atob","c","charCodeAt","decodeBase64","lastChunkHandling"],"sources":["../src/base64.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Base64 encoding and decoding utilities\n */\n\nfunction toBase64(uint8Array: Uint8Array, options: Uint8ArrayToBase64Options): string {\n    if (typeof uint8Array.toBase64 === \"function\") {\n        // Currently this is only supported in Firefox,\n        // but we match the options in the hope in the future we can rely on it for all environments.\n        // https://tc39.es/proposal-arraybuffer-base64/spec/#sec-uint8array.prototype.tobase64\n        return uint8Array.toBase64(options);\n    }\n\n    let base64 = btoa(uint8Array.reduce((acc, current) => acc + String.fromCharCode(current), \"\"));\n    if (options.omitPadding) {\n        base64 = base64.replace(/={1,2}$/, \"\");\n    }\n    if (options.alphabet === \"base64url\") {\n        base64 = base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n\n    return base64;\n}\n\n/**\n * Encode a typed array of uint8 as base64.\n * @param uint8Array - The data to encode.\n * @returns The base64.\n */\nexport function encodeBase64(uint8Array: Uint8Array): string {\n    return toBase64(uint8Array, { alphabet: \"base64\", omitPadding: false });\n}\n\n/**\n * Encode a typed array of uint8 as unpadded base64.\n * @param uint8Array - The data to encode.\n * @returns The unpadded base64.\n */\nexport function encodeUnpaddedBase64(uint8Array: Uint8Array): string {\n    return toBase64(uint8Array, { alphabet: \"base64\", omitPadding: true });\n}\n\n/**\n * Encode a typed array of uint8 as unpadded base64 using the URL-safe encoding.\n * @param uint8Array - The data to encode.\n * @returns The unpadded base64.\n */\nexport function encodeUnpaddedBase64Url(uint8Array: Uint8Array): string {\n    return toBase64(uint8Array, { alphabet: \"base64url\", omitPadding: true });\n}\n\nfunction fromBase64(base64: string, options: Uint8ArrayFromBase64Options): Uint8Array {\n    if (typeof Uint8Array.fromBase64 === \"function\") {\n        // Currently this is only supported in Firefox,\n        // but we match the options in the hope in the future we can rely on it for all environments.\n        // https://tc39.es/proposal-arraybuffer-base64/spec/#sec-uint8array.frombase64\n        return Uint8Array.fromBase64(base64, options);\n    }\n\n    return Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n}\n\n/**\n * Decode a base64 (or base64url) string to a typed array of uint8.\n * @param base64 - The base64 to decode.\n * @returns The decoded data.\n */\nexport function decodeBase64(base64: string): Uint8Array {\n    // The function requires us to select an alphabet, but we don't know if base64url was used so we convert.\n    return fromBase64(base64.replace(/-/g, \"+\").replace(/_/g, \"/\"), { alphabet: \"base64\", lastChunkHandling: \"loose\" });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,QAAQA,CAACC,UAAsB,EAAEC,OAAkC,EAAU;EAClF,IAAI,OAAOD,UAAU,CAACD,QAAQ,KAAK,UAAU,EAAE;IAC3C;IACA;IACA;IACA,OAAOC,UAAU,CAACD,QAAQ,CAACE,OAAO,CAAC;EACvC;EAEA,IAAIC,MAAM,GAAGC,IAAI,CAACH,UAAU,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAKD,GAAG,GAAGE,MAAM,CAACC,YAAY,CAACF,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;EAC9F,IAAIL,OAAO,CAACQ,WAAW,EAAE;IACrBP,MAAM,GAAGA,MAAM,CAACQ,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EAC1C;EACA,IAAIT,OAAO,CAACU,QAAQ,KAAK,WAAW,EAAE;IAClCT,MAAM,GAAGA,MAAM,CAACQ,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAC3D;EAEA,OAAOR,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,YAAYA,CAACZ,UAAsB,EAAU;EACzD,OAAOD,QAAQ,CAACC,UAAU,EAAE;IAAEW,QAAQ,EAAE,QAAQ;IAAEF,WAAW,EAAE;EAAM,CAAC,CAAC;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,oBAAoBA,CAACb,UAAsB,EAAU;EACjE,OAAOD,QAAQ,CAACC,UAAU,EAAE;IAAEW,QAAQ,EAAE,QAAQ;IAAEF,WAAW,EAAE;EAAK,CAAC,CAAC;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,uBAAuBA,CAACd,UAAsB,EAAU;EACpE,OAAOD,QAAQ,CAACC,UAAU,EAAE;IAAEW,QAAQ,EAAE,WAAW;IAAEF,WAAW,EAAE;EAAK,CAAC,CAAC;AAC7E;AAEA,SAASM,UAAUA,CAACb,MAAc,EAAED,OAAoC,EAAc;EAClF,IAAI,OAAOe,UAAU,CAACD,UAAU,KAAK,UAAU,EAAE;IAC7C;IACA;IACA;IACA,OAAOC,UAAU,CAACD,UAAU,CAACb,MAAM,EAAED,OAAO,CAAC;EACjD;EAEA,OAAOe,UAAU,CAACC,IAAI,CAACC,IAAI,CAAChB,MAAM,CAAC,EAAGiB,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACnB,MAAc,EAAc;EACrD;EACA,OAAOa,UAAU,CAACb,MAAM,CAACQ,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;IAAEC,QAAQ,EAAE,QAAQ;IAAEW,iBAAiB,EAAE;EAAQ,CAAC,CAAC;AACvH","ignoreList":[]}